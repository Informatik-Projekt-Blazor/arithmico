Start = Definition / Expression

Expression = NumericExpression / BooleanExpression / Item
EncapsulatedExpression = OpeningParenthesis value:Expression ClosingParenthesis { return value; }

// general
Item = EncapsulatedExpression / Vector / FunctionCall / Primitive
ListItemWithSeperator = ArgumentSeperator value:Expression { return value; }
List = first:Expression rest:ListItemWithSeperator* {
    return [first].concat(rest);
}
Vector "vector" = OpeningSquareBracket values:List ClosingSquareBracket {
    return {type: "Vector", items: values ? values : []};
}

FunctionCall = symbol:Symbol OpeningParenthesis parameters:List? ClosingParenthesis {
    return {
        type: "FunctionCall",
        name: symbol.name,
        parameters: parameters ? parameters : []
    }
}

DataType = "number" / "boolean" / "vector" / "any"
DataTypeAnnotation "type annotation" =  _ ":" _ type:DataType { return type; }
TypedSymbol = symbol:Symbol type:DataTypeAnnotation? {
    return {type: type ? type : "any", name: symbol.name};
}
FListItem = ArgumentSeperator value:TypedSymbol { return value; }
FList = first:TypedSymbol rest:FListItem* { return [first].concat(rest); }
FunctionSignature = symbol:Symbol OpeningParenthesis parameters:FList? ClosingParenthesis {
    return {
        type: "FunctionSignature",
        parameters: parameters ? parameters : []
    };
}

Definition = target:(FunctionSignature / Symbol) DefineOperator value:Expression {
    return {
        type: "Definition",
        target,
        value
    };
}

// numeric expression
NumericExpression = Sum

SumOperator = AddOperator / SubOperator
SumItemValue = Product / Item
SumItemWithOperator = operator:SumOperator value:SumItemValue { return {operator, value}; }
SumItemWithoutOperator = value:SumItemValue { return {operator: "+", value}; }
Sum = first:SumItemWithoutOperator? rest:SumItemWithOperator+ {
    let items = [];
    if (first)
        items.push(first);

    return {
        type: "Sum",
        items: items.concat(rest)
    };
} / Product

ProductOperator = MulOperator / DivOperator
ProductItemValue = Power / Item
ProductItemWithOperator = operator:ProductOperator value:ProductItemValue { return {operator, value}; }
ProductItemWithoutOperator = value:ProductItemValue { return {operator: "*", value}; }
Product = first:ProductItemWithoutOperator rest:ProductItemWithOperator+ {
    return {
        type: "Product",
        items: [first].concat(rest)
    };
} / Power

PowerItem = Item
Power = left:PowerItem PowOperator right:PowerItem {
    return {type: "Power", items: [left, right]};
}

// boolean expressions
BooleanExpression = Relation

RelationItem = Or / Item
RelationItemWithOperator = operator:RelationOperator value:RelationItem { return {operator, value}; }
Relation = first:RelationItem rest:RelationItemWithOperator+ {
    return {
        type: "Relation",
        operators: rest.map(item => item.operator),
        values: [first].concat(rest.map(item => item.value))
    };
} / Or

OrItem = And / Not / Item
Or = left:OrItem OrOperator right:(Or / OrItem) {
    return {
        type: "Or",
        items: [left, right]
    };
} / And

AndItem = Not / Item
And = left:AndItem AndOperator right:(And / AndItem) {
    return {
        type: "And",
        items: [left, right]
    };
} / Not

Not = NotOperator value:(Not / Item) {
    return {
        type: "Not",
        value
    };
}

// primitives
Primitive = Boolean / Symbol / Number
Boolean "boolean" = v:("true" / "false") { return {type: "Boolean", value: v === "true"} }
Symbol "symbol" = ([a-z] / [A-Z] / "_")+ { return {type: "Symbol", name: text()}; }
Number "number" = [0-9]+ ("." [0-9]*)? { return {type: "Number", value: parseFloat(text(), 10)}; }

// operator tokens
AddOperator = _ "+" _ { return "+" }
SubOperator = _ "-" _ { return "-" }
MulOperator = _ "*" _ { return "*" }
DivOperator = _ "/" _ { return "/" }
PowOperator = _ "^" _ { return "^" }
NotOperator = _ "!" _
AndOperator = _ "&" _
OrOperator  = _ "|" _
DefineOperator = _ ":=" _

RelationOperator
    = LessThanOrEqualOperator
    / GreaterThanOrEqualOperator
    / EqualOperator
    / LessThanOperator
    / GreaterThanOperator

EqualOperator = _ "=" _ { return "EqualOperator"; }
LessThanOperator = _ "<" _ { return "LessThanOperator"; }
LessThanOrEqualOperator = _ "<=" _ { return "LessThanOrEqualOperator"; }
GreaterThanOperator = _ ">" _ { return "GreaterThanOperator"; }
GreaterThanOrEqualOperator = _ ">=" _  { return "GreaterThanOrEqualOperator"; }

// other tokens
ArgumentSeperator = _ "," _
OpeningParenthesis = _ "(" _
ClosingParenthesis = _ ")" _
OpeningSquareBracket = _ "[" _
ClosingSquareBracket = _ "]" _

// misc
_ "whitespace"
  	= [ \t\n\r]*

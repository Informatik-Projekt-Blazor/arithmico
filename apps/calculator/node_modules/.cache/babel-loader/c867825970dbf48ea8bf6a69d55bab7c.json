{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\nexports.isInitialized = isInitialized;\nexports.getDocumentation = getDocumentation;\nexports.getLoadingLog = getLoadingLog;\nexports.getDefaultContext = getDefaultContext;\nexports[\"default\"] = evaluate;\nObject.defineProperty(exports, \"serializeStack\", {\n  enumerable: true,\n  get: function get() {\n    return _contextUtils.serializeStack;\n  }\n});\n\nvar _parser = require(\"./parse/parser\");\n\nvar _eval = _interopRequireDefault(require(\"./eval\"));\n\nvar _serialize = _interopRequireDefault(require(\"./serialize\"));\n\nvar _pluginLoader = _interopRequireDefault(require(\"./utils/plugin-loader\"));\n\nvar _trigonometry = _interopRequireDefault(require(\"./plugins/core/trigonometry/trigonometry\"));\n\nvar _contextUtils = require(\"./utils/context-utils\");\n\nvar _nsolve = _interopRequireDefault(require(\"./plugins/core/nsolve/nsolve\"));\n\nvar _lsolve = _interopRequireDefault(require(\"./plugins/core/lsolve/lsolve\"));\n\nvar _nintegrate = _interopRequireDefault(require(\"./plugins/core/nintegrate/nintegrate\"));\n\nvar _nderive = _interopRequireDefault(require(\"./plugins/core/nderive/nderive\"));\n\nvar _exp = _interopRequireDefault(require(\"./plugins/core/exp/exp\"));\n\nvar _minmax = _interopRequireDefault(require(\"./plugins/core/minmax/minmax\"));\n\nvar _abs = _interopRequireDefault(require(\"./plugins/core/abs/abs\"));\n\nvar _fraction = _interopRequireDefault(require(\"./plugins/core/fraction/fraction\"));\n\nvar _cross = _interopRequireDefault(require(\"./plugins/core/cross/cross\"));\n\nvar _languageTransform = require(\"./language-transform\");\n\nvar _statistics = _interopRequireDefault(require(\"./plugins/core/statistics/statistics\"));\n\nvar _roots = _interopRequireDefault(require(\"./plugins/core/roots/roots\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar defaultOptions = (0, _contextUtils.createOptions)();\nvar plugins = [_trigonometry[\"default\"], _exp[\"default\"], _nsolve[\"default\"], _lsolve[\"default\"], _nintegrate[\"default\"], _nderive[\"default\"], _minmax[\"default\"], _abs[\"default\"], _fraction[\"default\"], _cross[\"default\"], _statistics[\"default\"], _roots[\"default\"]];\nvar defaultContext;\nvar loadingLog = [];\nvar documentation;\n\nfunction init() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n  var loadingResult = (0, _pluginLoader[\"default\"])(plugins, options);\n  defaultContext = loadingResult.context;\n  loadingLog = loadingResult.log;\n  documentation = loadingResult.documentation;\n}\n\nfunction isInitialized() {\n  return !!defaultContext;\n}\n\nfunction getDocumentation() {\n  return documentation;\n}\n\nfunction getLoadingLog() {\n  return loadingLog;\n}\n\nfunction getDefaultContext() {\n  if (!defaultContext) {\n    throw 'InitializationError: NumberCruncher was not initialized';\n  }\n\n  return defaultContext;\n}\n\nfunction evaluate(input) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultContext;\n\n  if (!context) {\n    if (!defaultContext) {\n      throw 'InitializationError: NumberCruncher was not initialized';\n    }\n\n    context = defaultContext;\n  }\n\n  var nodeTree;\n\n  try {\n    if (context.options.decimalSeparator === ',') {\n      nodeTree = (0, _parser.parse)((0, _languageTransform.transformGerman2English)(input));\n    } else {\n      nodeTree = (0, _parser.parse)(input);\n    }\n  } catch (syntaxError) {\n    throw syntaxError.message;\n  }\n\n  var result = (0, _eval[\"default\"])(nodeTree, context);\n  var resultString = (0, _serialize[\"default\"])(result, context.options);\n\n  if (result.type === 'define') {\n    var value = result.value;\n    return {\n      result: context.options.decimalSeparator === ',' ? (0, _languageTransform.transformEnglish2German)(resultString) : resultString,\n      context: (0, _contextUtils.insertStackObject)(result.name, value, context)\n    };\n  }\n\n  return {\n    result: context.options.decimalSeparator === ',' ? (0, _languageTransform.transformEnglish2German)(resultString) : resultString,\n    context: context\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAIA,IAAMA,cAAc,GAAG,kCAAvB;AAEA,IAAMC,OAAO,GAAG,CACZC,wBADY,EAEZC,eAFY,EAGZC,kBAHY,EAIZC,kBAJY,EAKZC,sBALY,EAMZC,mBANY,EAOZC,kBAPY,EAQZC,eARY,EASZC,oBATY,EAUZC,iBAVY,EAWZC,sBAXY,EAYZC,iBAZY,CAAhB;AAeA,IAAIC,cAAJ;AACA,IAAIC,UAAoB,GAAG,EAA3B;AACA,IAAIC,aAAJ;;AAEO,SAASC,IAAT,GAAiD;EAAA,IAAnCC,OAAmC,uEAAhBlB,cAAgB;EACpD,IAAMmB,aAAa,GAAG,8BAAYlB,OAAZ,EAAqBiB,OAArB,CAAtB;EACAJ,cAAc,GAAGK,aAAa,CAACC,OAA/BN;EACAC,UAAU,GAAGI,aAAa,CAACE,GAA3BN;EACAC,aAAa,GAAGG,aAAa,CAACH,aAA9BA;AACH;;AAEM,SAASM,aAAT,GAAyB;EAC5B,OAAO,CAAC,CAACR,cAAT;AACH;;AAEM,SAASS,gBAAT,GAA4B;EAC/B,OAAOP,aAAP;AACH;;AAEM,SAASQ,aAAT,GAAyB;EAC5B,OAAOT,UAAP;AACH;;AAEM,SAASU,iBAAT,GAA6B;EAChC,IAAI,CAACX,cAAL,EAAqB;IACjB,MAAM,yDAAN;EACH;;EAED,OAAOA,cAAP;AACH;;AAOc,SAASY,QAAT,CAAkBC,KAAlB,EAAoF;EAAA,IAAnDP,OAAmD,uEAAhCN,cAAgC;;EAC/F,IAAI,CAACM,OAAL,EAAc;IACV,IAAI,CAACN,cAAL,EAAqB;MACjB,MAAM,yDAAN;IACH;;IACDM,OAAO,GAAGN,cAAVM;EACH;;EAED,IAAIQ,QAAJ;;EAEA,IAAI;IACA,IAAIR,OAAO,CAACF,OAARE,CAAgBS,gBAAhBT,KAAqC,GAAzC,EAA8C;MAC1CQ,QAAQ,GAAG,mBAAM,gDAAwBD,KAAxB,CAAN,CAAXC;IADJ,OAEO;MACHA,QAAQ,GAAG,mBAAMD,KAAN,CAAXC;IACH;EALL,EAME,OAAOE,WAAP,EAAoB;IAClB,MAAMA,WAAW,CAACC,OAAlB;EACH;;EAED,IAAMC,MAAM,GAAG,sBAAaJ,QAAb,EAAuBR,OAAvB,CAAf;EACA,IAAMa,YAAY,GAAG,2BAAUD,MAAV,EAAkBZ,OAAO,CAACF,OAA1B,CAArB;;EAEA,IAAIc,MAAM,CAACE,IAAPF,KAAgB,QAApB,EAA8B;IAC1B,IAAMG,KAAK,GAAGH,MAAM,CAACG,KAArB;IACA,OAAO;MACHH,MAAM,EAAEZ,OAAO,CAACF,OAARE,CAAgBS,gBAAhBT,KAAqC,GAArCA,GAA2C,gDAAwBa,YAAxB,CAA3Cb,GAAmFa,YADxF;MAEHb,OAAO,EAAE,qCAAkBY,MAAM,CAACI,IAAzB,EAA+BD,KAA/B,EAAsCf,OAAtC;IAFN,CAAP;EAIH;;EAED,OAAO;IACHY,MAAM,EAAEZ,OAAO,CAACF,OAARE,CAAgBS,gBAAhBT,KAAqC,GAArCA,GAA2C,gDAAwBa,YAAxB,CAA3Cb,GAAmFa,YADxF;IAEHb,OAAO,EAAPA;EAFG,CAAP;AAIH","names":["defaultOptions","plugins","trigonometryPlugin","expPlugin","nsolvePlugin","lsolvePlugin","nintegratePlugin","nderivePlugin","minmaxPlugin","absPlugin","fractionPlugin","crossPlugin","statisticsPlugin","rootsPlugin","defaultContext","loadingLog","documentation","init","options","loadingResult","context","log","isInitialized","getDocumentation","getLoadingLog","getDefaultContext","evaluate","input","nodeTree","decimalSeparator","syntaxError","message","result","resultString","type","value","name"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/index.ts"],"sourcesContent":["import { GlobalDocumentationItem } from './types/Plugin';\nimport { parse } from './parse/parser';\nimport evaluateNode from './eval';\nimport serialize from './serialize';\nimport { Context, Options } from './types';\nimport loadPlugins from './utils/plugin-loader';\nimport trigonometryPlugin from './plugins/core/trigonometry/trigonometry';\nimport { createOptions, insertStackObject } from './utils/context-utils';\nimport nsolvePlugin from './plugins/core/nsolve/nsolve';\nimport lsolvePlugin from './plugins/core/lsolve/lsolve';\nimport nintegratePlugin from './plugins/core/nintegrate/nintegrate';\nimport nderivePlugin from './plugins/core/nderive/nderive';\nimport expPlugin from './plugins/core/exp/exp';\nimport minmaxPlugin from './plugins/core/minmax/minmax';\nimport absPlugin from './plugins/core/abs/abs';\nimport fractionPlugin from './plugins/core/fraction/fraction';\nimport crossPlugin from './plugins/core/cross/cross';\nimport { transformEnglish2German, transformGerman2English } from './language-transform';\nimport statisticsPlugin from './plugins/core/statistics/statistics';\nimport rootsPlugin from './plugins/core/roots/roots';\n\nexport { serializeStack } from './utils/context-utils';\n\nconst defaultOptions = createOptions();\n\nconst plugins = [\n    trigonometryPlugin,\n    expPlugin,\n    nsolvePlugin,\n    lsolvePlugin,\n    nintegratePlugin,\n    nderivePlugin,\n    minmaxPlugin,\n    absPlugin,\n    fractionPlugin,\n    crossPlugin,\n    statisticsPlugin,\n    rootsPlugin,\n];\n\nlet defaultContext: Context;\nlet loadingLog: string[] = [];\nlet documentation: GlobalDocumentationItem[];\n\nexport function init(options: Options = defaultOptions) {\n    const loadingResult = loadPlugins(plugins, options);\n    defaultContext = loadingResult.context;\n    loadingLog = loadingResult.log;\n    documentation = loadingResult.documentation;\n}\n\nexport function isInitialized() {\n    return !!defaultContext;\n}\n\nexport function getDocumentation() {\n    return documentation;\n}\n\nexport function getLoadingLog() {\n    return loadingLog;\n}\n\nexport function getDefaultContext() {\n    if (!defaultContext) {\n        throw 'InitializationError: NumberCruncher was not initialized';\n    }\n\n    return defaultContext;\n}\n\nexport interface EvaluateResult {\n    result: string;\n    context: Context;\n}\n\nexport default function evaluate(input: string, context: Context = defaultContext): EvaluateResult {\n    if (!context) {\n        if (!defaultContext) {\n            throw 'InitializationError: NumberCruncher was not initialized';\n        }\n        context = defaultContext;\n    }\n\n    let nodeTree;\n\n    try {\n        if (context.options.decimalSeparator === ',') {\n            nodeTree = parse(transformGerman2English(input));\n        } else {\n            nodeTree = parse(input);\n        }\n    } catch (syntaxError) {\n        throw syntaxError.message;\n    }\n\n    const result = evaluateNode(nodeTree, context);\n    const resultString = serialize(result, context.options);\n\n    if (result.type === 'define') {\n        const value = result.value;\n        return {\n            result: context.options.decimalSeparator === ',' ? transformEnglish2German(resultString) : resultString,\n            context: insertStackObject(result.name, value, context),\n        };\n    }\n\n    return {\n        result: context.options.decimalSeparator === ',' ? transformEnglish2German(resultString) : resultString,\n        context,\n    };\n}\n"]},"metadata":{},"sourceType":"script"}
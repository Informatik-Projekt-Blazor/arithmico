{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _eval = _interopRequireDefault(require(\"../../eval\"));\n\nvar _Minus = _interopRequireDefault(require(\"../../create/Minus\"));\n\nvar _Negate = _interopRequireDefault(require(\"../../create/Negate\"));\n\nvar _Plus = _interopRequireDefault(require(\"../../create/Plus\"));\n\nvar _symbolicUtils = require(\"../../utils/symbolic-utils\");\n\nvar _normalizeUtils = require(\"./../../utils/normalize-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar evaluateIfPossible = function evaluateIfPossible(node, context) {\n  if (!(0, _symbolicUtils.containsVariables)(node, context)) {\n    return (0, _eval[\"default\"])(node, context);\n  }\n};\n\nvar normalizeChildren = function normalizeChildren(node, context) {\n  if (node.type !== 'minus') {\n    return;\n  }\n\n  return (0, _Minus[\"default\"])((0, _[\"default\"])(node.left, context), (0, _[\"default\"])(node.right, context));\n};\n\nvar replaceMinusWithNegate = function replaceMinusWithNegate(node, context) {\n  if (node.type !== 'minus') {\n    return;\n  }\n\n  return (0, _[\"default\"])((0, _Plus[\"default\"])(node.left, (0, _Negate[\"default\"])(node.right)), context);\n};\n\nvar normalizeMinus = (0, _normalizeUtils.combineNormalizers)([evaluateIfPossible, normalizeChildren, replaceMinusWithNegate]);\nvar _default = normalizeMinus;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,kBAAqC,GAAG,SAAxCA,kBAAwC,CAACC,IAAD,EAAOC,OAAP,EAAmB;EAC7D,IAAI,CAAC,sCAAkBD,IAAlB,EAAwBC,OAAxB,CAAL,EAAuC;IACnC,OAAO,sBAASD,IAAT,EAAeC,OAAf,CAAP;EACH;AAHL;;AAMA,IAAMC,iBAAoC,GAAG,SAAvCA,iBAAuC,CAACF,IAAD,EAAOC,OAAP,EAAmB;EAC5D,IAAID,IAAI,CAACG,IAALH,KAAc,OAAlB,EAA2B;IACvB;EACH;;EAED,OAAO,uBAAY,kBAAUA,IAAI,CAACI,IAAf,EAAqBH,OAArB,CAAZ,EAA2C,kBAAUD,IAAI,CAACK,KAAf,EAAsBJ,OAAtB,CAA3C,CAAP;AALJ;;AAQA,IAAMK,sBAAyC,GAAG,SAA5CA,sBAA4C,CAACN,IAAD,EAAOC,OAAP,EAAmB;EACjE,IAAID,IAAI,CAACG,IAALH,KAAc,OAAlB,EAA2B;IACvB;EACH;;EAED,OAAO,kBAAU,sBAAWA,IAAI,CAACI,IAAhB,EAAsB,wBAAaJ,IAAI,CAACK,KAAlB,CAAtB,CAAV,EAA2DJ,OAA3D,CAAP;AALJ;;AAQA,IAAMM,cAAc,GAAG,wCAAmB,CAACR,kBAAD,EAAqBG,iBAArB,EAAwCI,sBAAxC,CAAnB,CAAvB;eAEeC","names":["evaluateIfPossible","node","context","normalizeChildren","type","left","right","replaceMinusWithNegate","normalizeMinus"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/normalize/nodes/normalize-minus.ts"],"sourcesContent":["import normalize from '..';\nimport evaluate from '../../eval';\nimport createMinus from '../../create/Minus';\nimport createNegate from '../../create/Negate';\nimport createPlus from '../../create/Plus';\nimport { containsVariables } from '../../utils/symbolic-utils';\nimport { combineNormalizers, PartialNormalizer } from './../../utils/normalize-utils';\n\nconst evaluateIfPossible: PartialNormalizer = (node, context) => {\n    if (!containsVariables(node, context)) {\n        return evaluate(node, context);\n    }\n};\n\nconst normalizeChildren: PartialNormalizer = (node, context) => {\n    if (node.type !== 'minus') {\n        return;\n    }\n\n    return createMinus(normalize(node.left, context), normalize(node.right, context));\n};\n\nconst replaceMinusWithNegate: PartialNormalizer = (node, context) => {\n    if (node.type !== 'minus') {\n        return;\n    }\n\n    return normalize(createPlus(node.left, createNegate(node.right)), context);\n};\n\nconst normalizeMinus = combineNormalizers([evaluateIfPossible, normalizeChildren, replaceMinusWithNegate]);\n\nexport default normalizeMinus;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluateMinus;\n\nvar _2 = _interopRequireDefault(require(\"..\"));\n\nvar _Minus = _interopRequireDefault(require(\"../../create/Minus\"));\n\nvar _NumberNode = _interopRequireDefault(require(\"../../create/NumberNode\"));\n\nvar _Vector = _interopRequireDefault(require(\"../../create/Vector\"));\n\nvar _composeFunctionUtils = require(\"../../utils/compose-function-utils\");\n\nvar _vectorUtils = require(\"../../utils/vector-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluateMinus(node, context) {\n  var leftChild = (0, _2[\"default\"])(node.left, context);\n  var rightChild = (0, _2[\"default\"])(node.right, context);\n\n  if (leftChild.type === 'number' && rightChild.type === 'number' && context.options.config.operators.minusNumberNumber) {\n    return (0, _NumberNode[\"default\"])(leftChild.value - rightChild.value);\n  } else if (leftChild.type === 'vector' && rightChild.type === 'vector' && context.options.config.operators.minusVectorVector) {\n    if (!(0, _vectorUtils.compareShapesOfVectors)(leftChild, rightChild)) {\n      throw \"ArithmeticError: can not add vectors of incompatible shapes\";\n    }\n\n    return (0, _2[\"default\"])((0, _Vector[\"default\"])(leftChild.values.map(function (_, index) {\n      return (0, _Minus[\"default\"])(leftChild.values[index], rightChild.values[index]);\n    })), context);\n  } else if (leftChild.type === 'function' && rightChild.type === 'function' && context.options.config.operators.minusFunctionFunction) {\n    return (0, _composeFunctionUtils.createBinaryOperatorFunctionComposition)(leftChild, rightChild, _Minus[\"default\"], context);\n  }\n\n  throw \"TypeError: <\".concat(leftChild.type, \"> - <\").concat(rightChild.type, \"> is not defined\");\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEe,SAASA,aAAT,CAAuBC,IAAvB,EAAoCC,OAApC,EAAsE;EACjF,IAAMC,SAAS,GAAG,mBAASF,IAAI,CAACG,IAAd,EAAoBF,OAApB,CAAlB;EACA,IAAMG,UAAU,GAAG,mBAASJ,IAAI,CAACK,KAAd,EAAqBJ,OAArB,CAAnB;;EAEA,IACIC,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,QADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCS,iBAHrC,EAIE;IACE,OAAO,4BAAiBR,SAAS,CAACS,KAAVT,GAAkBE,UAAU,CAACO,KAA9C,CAAP;EALJ,OAMO,IACHT,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,QADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCW,iBAH9B,EAIL;IACE,IAAI,CAAC,yCAAuBV,SAAvB,EAAkCE,UAAlC,CAAL,EAAoD;MAChD;IACH;;IAED,OAAO,mBACH,wBACIF,SAAS,CAACW,MAAVX,CAAiBY,GAAjBZ,CAAqB,UAACa,CAAD,EAAIC,KAAJ;MAAA,OAAc,uBAAYd,SAAS,CAACW,MAAVX,CAAiBc,KAAjBd,CAAZ,EAAqCE,UAAU,CAACS,MAAXT,CAAkBY,KAAlBZ,CAArC,CAAd;IAArB,EADJ,CADG,EAIHH,OAJG,CAAP;EATG,OAeA,IACHC,SAAS,CAACI,IAAVJ,KAAmB,UAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,UADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCgB,qBAH9B,EAIL;IACE,OAAO,mEAAwCf,SAAxC,EAAmDE,UAAnD,EAA+Dc,iBAA/D,EAA4EjB,OAA5E,CAAP;EACH;;EAED,4BAAqBC,SAAS,CAACI,IAA/B,kBAA2CF,UAAU,CAACE,IAAtD;AACH","names":["evaluateMinus","node","context","leftChild","left","rightChild","right","type","options","config","operators","minusNumberNumber","value","minusVectorVector","values","map","_","index","minusFunctionFunction","createMinus"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/nodes/Minus.ts"],"sourcesContent":["import evaluate from '..';\nimport createMinus from '../../create/Minus';\nimport createNumberNode from '../../create/NumberNode';\nimport createVector from '../../create/Vector';\nimport { Minus, Context, SyntaxTreeNode } from '../../types';\nimport { createBinaryOperatorFunctionComposition } from '../../utils/compose-function-utils';\nimport { compareShapesOfVectors } from '../../utils/vector-utils';\n\nexport default function evaluateMinus(node: Minus, context: Context): SyntaxTreeNode {\n    const leftChild = evaluate(node.left, context);\n    const rightChild = evaluate(node.right, context);\n\n    if (\n        leftChild.type === 'number' &&\n        rightChild.type === 'number' &&\n        context.options.config.operators.minusNumberNumber\n    ) {\n        return createNumberNode(leftChild.value - rightChild.value);\n    } else if (\n        leftChild.type === 'vector' &&\n        rightChild.type === 'vector' &&\n        context.options.config.operators.minusVectorVector\n    ) {\n        if (!compareShapesOfVectors(leftChild, rightChild)) {\n            throw `ArithmeticError: can not add vectors of incompatible shapes`;\n        }\n\n        return evaluate(\n            createVector(\n                leftChild.values.map((_, index) => createMinus(leftChild.values[index], rightChild.values[index])),\n            ),\n            context,\n        );\n    } else if (\n        leftChild.type === 'function' &&\n        rightChild.type === 'function' &&\n        context.options.config.operators.minusFunctionFunction\n    ) {\n        return createBinaryOperatorFunctionComposition(leftChild, rightChild, createMinus, context);\n    }\n\n    throw `TypeError: <${leftChild.type}> - <${rightChild.type}> is not defined`;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = findCandidates;\n\nfunction findCandidates(points) {\n  var candidates = [];\n\n  if (points.length < 3) {\n    return candidates;\n  }\n\n  for (var i = 1; i < points.length - 1; i++) {\n    var y1 = points[i - 1][1],\n        y2 = points[i][1],\n        y3 = points[i + 1][1];\n\n    if (y2 < y1 && y2 < y3) {\n      var x1 = points[i - 1][0],\n          x2 = points[i + 1][0];\n      candidates.push([x1, x2]);\n    }\n  }\n\n  return candidates;\n}","map":{"version":3,"mappings":";;;;;;;AAEe,SAASA,cAAT,CAAwBC,MAAxB,EAA+D;EAC1E,IAAMC,UAAgC,GAAG,EAAzC;;EAEA,IAAID,MAAM,CAACE,MAAPF,GAAgB,CAApB,EAAuB;IACnB,OAAOC,UAAP;EACH;;EAED,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,MAAPF,GAAgB,CAApC,EAAuCG,CAAC,EAAxC,EAA4C;IACxC,IAAMC,EAAE,GAAGJ,MAAM,CAACG,CAAC,GAAG,CAAL,CAANH,CAAc,CAAdA,CAAX;IAAA,IACIK,EAAE,GAAGL,MAAM,CAACG,CAAD,CAANH,CAAU,CAAVA,CADT;IAAA,IAEIM,EAAE,GAAGN,MAAM,CAACG,CAAC,GAAG,CAAL,CAANH,CAAc,CAAdA,CAFT;;IAIA,IAAIK,EAAE,GAAGD,EAALC,IAAWA,EAAE,GAAGC,EAApB,EAAwB;MACpB,IAAMC,EAAE,GAAGP,MAAM,CAACG,CAAC,GAAG,CAAL,CAANH,CAAc,CAAdA,CAAX;MAAA,IACIQ,EAAE,GAAGR,MAAM,CAACG,CAAC,GAAG,CAAL,CAANH,CAAc,CAAdA,CADT;MAEAC,UAAU,CAACQ,IAAXR,CAAgB,CAACM,EAAD,EAAKC,EAAL,CAAhBP;IACH;EACJ;;EAED,OAAOA,UAAP;AACH","names":["findCandidates","points","candidates","length","i","y1","y2","y3","x1","x2","push"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/nsolve/utils/find-candidates.ts"],"sourcesContent":["import { CandidateIntervall, Point } from '../types';\n\nexport default function findCandidates(points: Point[]): CandidateIntervall[] {\n    const candidates: CandidateIntervall[] = [];\n\n    if (points.length < 3) {\n        return candidates;\n    }\n\n    for (let i = 1; i < points.length - 1; i++) {\n        const y1 = points[i - 1][1],\n            y2 = points[i][1],\n            y3 = points[i + 1][1];\n\n        if (y2 < y1 && y2 < y3) {\n            const x1 = points[i - 1][0],\n                x2 = points[i + 1][0];\n            candidates.push([x1, x2]);\n        }\n    }\n\n    return candidates;\n}\n"]},"metadata":{},"sourceType":"script"}
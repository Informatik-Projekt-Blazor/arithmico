{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getShape = getShape;\nexports.compareShapesOfVectors = compareShapesOfVectors;\nexports.isVectorHomogeneous = isVectorHomogeneous;\nexports.getVectorRank = getVectorRank;\nexports.getVectorDimensions = getVectorDimensions;\nexports.getVectorElement = getVectorElement;\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction getShape(vector) {\n  var containsVectors = vector.values.reduce(function (acc, value) {\n    return acc || value.type === 'vector';\n  }, false);\n\n  if (!containsVectors) {\n    return vector.values.length;\n  }\n\n  return vector.values.map(function (value) {\n    return value.type === 'vector' ? getShape(value) : 1;\n  });\n}\n\nfunction compareShapes(shapeA, shapeB) {\n  if (typeof shapeA === 'number' && typeof shapeB === 'number') {\n    return shapeA === shapeB;\n  }\n\n  if (shapeA instanceof Array && shapeB instanceof Array && shapeA.length === shapeB.length) {\n    return shapeA.reduce(function (acc, _, index) {\n      return compareShapes(shapeA[index], shapeB[index]) && acc;\n    }, true);\n  }\n\n  return false;\n}\n\nfunction compareShapesOfVectors(vectorA, vectorB) {\n  return compareShapes(getShape(vectorA), getShape(vectorB));\n}\n\nfunction isShapeHomogeneous(shape) {\n  if (typeof shape === 'number') {\n    return true;\n  }\n\n  var childShapesHomogeneous = shape.every(isShapeHomogeneous);\n\n  if (!childShapesHomogeneous) {\n    return false;\n  }\n\n  for (var i = 1; i < shape.length; i++) {\n    if (!compareShapes(shape[i], shape[0])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getShapeRank(shape) {\n  if (typeof shape === 'number') {\n    return 1;\n  }\n\n  return getShapeRank(shape[0]) + 1;\n}\n\nfunction isVectorHomogeneous(vector) {\n  return isShapeHomogeneous(getShape(vector));\n}\n\nfunction getVectorRank(vector) {\n  var shape = getShape(vector);\n\n  if (!isShapeHomogeneous(shape)) {\n    throw \"TypeError: can not get rank of inhomogeneous vector\";\n  }\n\n  return getShapeRank(shape);\n}\n\nfunction getShapeDimensions(shape) {\n  if (typeof shape === 'number') {\n    return [shape];\n  }\n\n  return [shape.length].concat(_toConsumableArray(getShapeDimensions(shape[0])));\n}\n\nfunction getVectorDimensions(vector) {\n  var shape = getShape(vector);\n\n  if (!isShapeHomogeneous(shape)) {\n    throw \"TypeError: can not get dimensions of inhomogeneous vector\";\n  }\n\n  return getShapeDimensions(shape);\n}\n\nfunction getVectorElement(vector, index) {\n  if (index.length === 0) {\n    throw 'RuntimeError: empty vector index';\n  }\n\n  if (vector.values.length <= index[0]) {\n    throw \"RuntimeError: vector index out of bounds\";\n  }\n\n  if (index.length === 1) {\n    return vector.values[index[0]];\n  } else {\n    var value = vector.values[index[0]];\n\n    if (value.type !== 'vector') {\n      throw 'RuntimeError: incompatible vector index';\n    }\n\n    return getVectorElement(value, index.slice(1));\n  }\n}","map":{"version":3,"mappings":"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","names":["getShape","vector","containsVectors","values","reduce","acc","value","type","length","map","compareShapes","shapeA","shapeB","Array","_","index","compareShapesOfVectors","vectorA","vectorB","isShapeHomogeneous","shape","childShapesHomogeneous","every","i","getShapeRank","isVectorHomogeneous","getVectorRank","getShapeDimensions","getVectorDimensions","getVectorElement","slice"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/utils/vector-utils.ts"],"sourcesContent":["import { SyntaxTreeNode } from './../types/SyntaxTreeNodes';\nimport { Vector } from '../types';\n\ntype VectorShape = number | (number | VectorShape)[];\n\nexport function getShape(vector: Vector): VectorShape {\n    const containsVectors = vector.values.reduce((acc, value) => acc || value.type === 'vector', false);\n\n    if (!containsVectors) {\n        return vector.values.length;\n    }\n\n    return vector.values.map((value) => (value.type === 'vector' ? getShape(value) : 1));\n}\n\nfunction compareShapes(shapeA: VectorShape, shapeB: VectorShape): boolean {\n    if (typeof shapeA === 'number' && typeof shapeB === 'number') {\n        return shapeA === shapeB;\n    }\n\n    if (shapeA instanceof Array && shapeB instanceof Array && shapeA.length === shapeB.length) {\n        return shapeA.reduce((acc, _, index) => compareShapes(shapeA[index], shapeB[index]) && acc, true);\n    }\n\n    return false;\n}\n\nexport function compareShapesOfVectors(vectorA: Vector, vectorB: Vector): boolean {\n    return compareShapes(getShape(vectorA), getShape(vectorB));\n}\n\nfunction isShapeHomogeneous(shape: VectorShape): boolean {\n    if (typeof shape === 'number') {\n        return true;\n    }\n\n    const childShapesHomogeneous = shape.every(isShapeHomogeneous);\n    if (!childShapesHomogeneous) {\n        return false;\n    }\n\n    for (let i = 1; i < shape.length; i++) {\n        if (!compareShapes(shape[i], shape[0])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction getShapeRank(shape: VectorShape): number {\n    if (typeof shape === 'number') {\n        return 1;\n    }\n\n    return getShapeRank(shape[0]) + 1;\n}\n\nexport function isVectorHomogeneous(vector: Vector): boolean {\n    return isShapeHomogeneous(getShape(vector));\n}\n\nexport function getVectorRank(vector: Vector): number {\n    const shape = getShape(vector);\n\n    if (!isShapeHomogeneous(shape)) {\n        throw `TypeError: can not get rank of inhomogeneous vector`;\n    }\n\n    return getShapeRank(shape);\n}\n\nfunction getShapeDimensions(shape: VectorShape): number[] {\n    if (typeof shape === 'number') {\n        return [shape];\n    }\n\n    return [shape.length, ...getShapeDimensions(shape[0])];\n}\n\nexport function getVectorDimensions(vector: Vector): number[] {\n    const shape = getShape(vector);\n\n    if (!isShapeHomogeneous(shape)) {\n        throw `TypeError: can not get dimensions of inhomogeneous vector`;\n    }\n\n    return getShapeDimensions(shape);\n}\n\nexport function getVectorElement(vector: Vector, index: number[]): SyntaxTreeNode {\n    if (index.length === 0) {\n        throw 'RuntimeError: empty vector index';\n    }\n\n    if (vector.values.length <= index[0]) {\n        throw `RuntimeError: vector index out of bounds`;\n    }\n\n    if (index.length === 1) {\n        return vector.values[index[0]];\n    } else {\n        const value = vector.values[index[0]];\n        if (value.type !== 'vector') {\n            throw 'RuntimeError: incompatible vector index';\n        }\n        return getVectorElement(value, index.slice(1));\n    }\n}\n"]},"metadata":{},"sourceType":"script"}
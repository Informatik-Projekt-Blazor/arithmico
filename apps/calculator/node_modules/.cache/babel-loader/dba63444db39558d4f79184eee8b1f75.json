{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = findDirectHits;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction findDirectHits(points) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return points.filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        _x = _ref2[0],\n        y = _ref2[1];\n\n    return y === 0;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        x = _ref4[0],\n        _y = _ref4[1];\n\n    return x;\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAASA,cAAT,CAAwBC,MAAxB,EAAmD;EAC9D;EACA,OAAOA,MAAM,CAACC,MAAPD,CAAc;IAAA;IAAA,IAAEE,EAAF;IAAA,IAAMC,CAAN;;IAAA,OAAaA,CAAC,KAAK,CAAnB;EAAd,GAAoCC,GAApCJ,CAAwC;IAAA;IAAA,IAAEK,CAAF;IAAA,IAAKC,EAAL;;IAAA,OAAaD,CAAb;EAAxC,EAAP;AACH","names":["findDirectHits","points","filter","_x","y","map","x","_y"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/nsolve/utils/find-direct-hits.ts"],"sourcesContent":["import { Point } from './../types';\n\nexport default function findDirectHits(points: Point[]): number[] {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return points.filter(([_x, y]) => y === 0).map(([x, _y]) => x);\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = serializeNumber;\n\nfunction serializeNumber(node, options) {\n  if (node.value === 0) {\n    return '0';\n  }\n\n  var magnitude = Math.floor(Math.log10(Math.abs(node.value)));\n\n  if (Math.abs(magnitude) > options.magnitudeThresholdForScientificNotation) {\n    var mantisse = Math.pow(10, -magnitude) * node.value;\n    var mantisseStr = Number(mantisse.toFixed(options.decimalPlaces)).toString();\n\n    if (magnitude < 0) {\n      return \"\".concat(mantisseStr, \" * 10^(\").concat(magnitude.toString(), \")\");\n    }\n\n    return \"\".concat(mantisseStr, \" * 10^\").concat(magnitude.toString());\n  }\n\n  return Number(node.value.toFixed(options.decimalPlaces)).toString();\n}","map":{"version":3,"mappings":";;;;;;;AAEe,SAASA,eAAT,CAAyBC,IAAzB,EAA2CC,OAA3C,EAAqE;EAChF,IAAID,IAAI,CAACE,KAALF,KAAe,CAAnB,EAAsB;IAClB,OAAO,GAAP;EACH;;EAED,IAAMG,SAAS,GAAGC,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACE,KAALF,CAAWA,IAAI,CAACG,GAALH,CAASJ,IAAI,CAACE,KAAdE,CAAXA,CAAXA,CAAlB;;EAEA,IAAIA,IAAI,CAACG,GAALH,CAASD,SAATC,IAAsBH,OAAO,CAACO,uCAAlC,EAA2E;IACvE,IAAMC,QAAQ,GAAGL,IAAI,CAACM,GAALN,CAAS,EAATA,EAAa,CAACD,SAAdC,IAA2BJ,IAAI,CAACE,KAAjD;IACA,IAAMS,WAAW,GAAGC,MAAM,CAACH,QAAQ,CAACI,OAATJ,CAAiBR,OAAO,CAACa,aAAzBL,CAAD,CAANG,CAAgDG,QAAhDH,EAApB;;IAEA,IAAIT,SAAS,GAAG,CAAhB,EAAmB;MACf,iBAAUQ,WAAV,oBAA+BR,SAAS,CAACY,QAAVZ,EAA/B;IACH;;IAED,iBAAUQ,WAAV,mBAA8BR,SAAS,CAACY,QAAVZ,EAA9B;EACH;;EAED,OAAOS,MAAM,CAACZ,IAAI,CAACE,KAALF,CAAWa,OAAXb,CAAmBC,OAAO,CAACa,aAA3Bd,CAAD,CAANY,CAAkDG,QAAlDH,EAAP;AACH","names":["serializeNumber","node","options","value","magnitude","Math","floor","log10","abs","magnitudeThresholdForScientificNotation","mantisse","pow","mantisseStr","Number","toFixed","decimalPlaces","toString"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/serialize/nodes/Number.ts"],"sourcesContent":["import { NumberNode, Options } from './../../types';\n\nexport default function serializeNumber(node: NumberNode, options: Options): string {\n    if (node.value === 0) {\n        return '0';\n    }\n\n    const magnitude = Math.floor(Math.log10(Math.abs(node.value)));\n\n    if (Math.abs(magnitude) > options.magnitudeThresholdForScientificNotation) {\n        const mantisse = Math.pow(10, -magnitude) * node.value;\n        const mantisseStr = Number(mantisse.toFixed(options.decimalPlaces)).toString();\n\n        if (magnitude < 0) {\n            return `${mantisseStr} * 10^(${magnitude.toString()})`;\n        }\n\n        return `${mantisseStr} * 10^${magnitude.toString()}`;\n    }\n\n    return Number(node.value.toFixed(options.decimalPlaces)).toString();\n}\n"]},"metadata":{},"sourceType":"script"}
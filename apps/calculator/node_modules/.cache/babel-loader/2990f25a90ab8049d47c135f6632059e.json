{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluateEquals;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _BooleanNode = _interopRequireDefault(require(\"../../create/BooleanNode\"));\n\nvar _Equals = _interopRequireDefault(require(\"../../create/Equals\"));\n\nvar _composeFunctionUtils = require(\"../../utils/compose-function-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluateEquals(node, context) {\n  var leftChild = (0, _[\"default\"])(node.left, context);\n  var rightChild = (0, _[\"default\"])(node.right, context);\n\n  if (leftChild.type === 'boolean' && rightChild.type === 'boolean' && context.options.config.operators.equalsBooleanBoolean || leftChild.type === 'number' && rightChild.type === 'number' && context.options.config.operators.equalsNumberNumber) {\n    return (0, _BooleanNode[\"default\"])(leftChild.value === rightChild.value);\n  } else if (leftChild.type === 'function' && rightChild.type === 'function' && context.options.config.operators.equalsFunctionFunction) {\n    return (0, _composeFunctionUtils.createBinaryOperatorFunctionComposition)(leftChild, rightChild, _Equals[\"default\"], context);\n  }\n\n  throw \"TypeError: <\".concat(leftChild.type, \"> & <\").concat(rightChild.type, \"> is not defined\");\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAEe,SAASA,cAAT,CAAwBC,IAAxB,EAAsCC,OAAtC,EAAwE;EACnF,IAAMC,SAAS,GAAG,kBAASF,IAAI,CAACG,IAAd,EAAoBF,OAApB,CAAlB;EACA,IAAMG,UAAU,GAAG,kBAASJ,IAAI,CAACK,KAAd,EAAqBJ,OAArB,CAAnB;;EAEA,IACKC,SAAS,CAACI,IAAVJ,KAAmB,SAAnBA,IACGE,UAAU,CAACE,IAAXF,KAAoB,SADvBF,IAEGD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCS,oBAFpCR,IAGAA,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACGE,UAAU,CAACE,IAAXF,KAAoB,QADvBF,IAEGD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCU,kBANzC,EAOE;IACE,OAAO,6BAAkBT,SAAS,CAACU,KAAVV,KAAoBE,UAAU,CAACQ,KAAjD,CAAP;EARJ,OASO,IACHV,SAAS,CAACI,IAAVJ,KAAmB,UAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,UADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCY,sBAH9B,EAIL;IACE,OAAO,mEAAwCX,SAAxC,EAAmDE,UAAnD,EAA+DU,kBAA/D,EAA6Eb,OAA7E,CAAP;EACH;;EAED,4BAAqBC,SAAS,CAACI,IAA/B,kBAA2CF,UAAU,CAACE,IAAtD;AACH","names":["evaluateEquals","node","context","leftChild","left","rightChild","right","type","options","config","operators","equalsBooleanBoolean","equalsNumberNumber","value","equalsFunctionFunction","createEquals"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/nodes/Equals.ts"],"sourcesContent":["import evaluate from '..';\nimport createBooleanNode from '../../create/BooleanNode';\nimport createEquals from '../../create/Equals';\nimport { Equals, Context, SyntaxTreeNode } from '../../types';\nimport { createBinaryOperatorFunctionComposition } from '../../utils/compose-function-utils';\n\nexport default function evaluateEquals(node: Equals, context: Context): SyntaxTreeNode {\n    const leftChild = evaluate(node.left, context);\n    const rightChild = evaluate(node.right, context);\n\n    if (\n        (leftChild.type === 'boolean' &&\n            rightChild.type === 'boolean' &&\n            context.options.config.operators.equalsBooleanBoolean) ||\n        (leftChild.type === 'number' &&\n            rightChild.type === 'number' &&\n            context.options.config.operators.equalsNumberNumber)\n    ) {\n        return createBooleanNode(leftChild.value === rightChild.value);\n    } else if (\n        leftChild.type === 'function' &&\n        rightChild.type === 'function' &&\n        context.options.config.operators.equalsFunctionFunction\n    ) {\n        return createBinaryOperatorFunctionComposition(leftChild, rightChild, createEquals, context);\n    }\n\n    throw `TypeError: <${leftChild.type}> & <${rightChild.type}> is not defined`;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _Plus = _interopRequireDefault(require(\"../../create/Plus\"));\n\nvar _Times = _interopRequireDefault(require(\"../../create/Times\"));\n\nvar _eval = _interopRequireDefault(require(\"../../eval\"));\n\nvar _normalizeUtils = require(\"../../utils/normalize-utils\");\n\nvar _symbolicUtils = require(\"../../utils/symbolic-utils\");\n\nvar _Power = _interopRequireDefault(require(\"../../create/Power\"));\n\nvar _NumberNode = _interopRequireDefault(require(\"../../create/NumberNode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar evaluateIfPossible = function evaluateIfPossible(node, context) {\n  if (!(0, _symbolicUtils.containsVariables)(node, context)) {\n    return (0, _eval[\"default\"])(node, context);\n  }\n};\n\nvar normalizeChildren = function normalizeChildren(node, context) {\n  if (node.type !== 'times') {\n    return;\n  }\n\n  return (0, _Times[\"default\"])((0, _[\"default\"])(node.left, context), (0, _[\"default\"])(node.right, context));\n};\n\nvar moveVariablesRight = function moveVariablesRight(node, context) {\n  if (node.type !== 'times') {\n    return;\n  }\n\n  if (node.right.type === 'times') {\n    if ((0, _symbolicUtils.containsVariables)(node.left, context) && !(0, _symbolicUtils.containsVariables)(node.right.left, context)) {\n      return (0, _[\"default\"])((0, _Times[\"default\"])(node.right.left, (0, _Times[\"default\"])(node.left, node.right.right)), context);\n    }\n  } else {\n    if ((0, _symbolicUtils.containsVariables)(node.left, context) && !(0, _symbolicUtils.containsVariables)(node.right, context)) {\n      return (0, _[\"default\"])((0, _Times[\"default\"])(node.right, node.left), context);\n    }\n  }\n};\n\nvar rotateIfLeftChildTimes = function rotateIfLeftChildTimes(node, context) {\n  if (!(node.type === 'times' && node.left.type === 'times')) {\n    return;\n  }\n\n  var rotatedNode = (0, _Times[\"default\"])(node.left.left, (0, _Times[\"default\"])(node.left.right, node.right));\n  return (0, _[\"default\"])(rotatedNode, context);\n};\n\nvar combineLeftChildWithRightChildLeftChild = function combineLeftChildWithRightChildLeftChild(node, context) {\n  if (!(node.type === 'times' && !(0, _symbolicUtils.containsVariables)(node.left, context) && node.right.type === 'times' && !(0, _symbolicUtils.containsVariables)(node.right.left, context))) {\n    return;\n  }\n\n  var normalizedNode = (0, _Times[\"default\"])((0, _eval[\"default\"])((0, _Times[\"default\"])(node.left, node.right.left), context), node.right.right);\n  return (0, _[\"default\"])(normalizedNode, context);\n};\n\nvar distributeLeftChildPlus = function distributeLeftChildPlus(node, context) {\n  if (node.type !== 'times' || node.left.type !== 'plus') {\n    return;\n  }\n\n  return (0, _[\"default\"])((0, _Plus[\"default\"])((0, _Times[\"default\"])(node.left.left, node.right), (0, _Times[\"default\"])(node.left.right, node.right)), context);\n};\n\nvar distributeRightChildPlus = function distributeRightChildPlus(node, context) {\n  if (node.type !== 'times' || node.right.type !== 'plus') {\n    return;\n  }\n\n  return (0, _[\"default\"])((0, _Plus[\"default\"])((0, _Times[\"default\"])(node.left, node.right.left), (0, _Times[\"default\"])(node.left, node.right.right)), context);\n};\n\nvar moveLeftNegateOut = function moveLeftNegateOut(node, context) {\n  if (node.type !== 'times' || node.left.type !== 'negate') {\n    return;\n  }\n\n  return (0, _[\"default\"])((0, _Times[\"default\"])((0, _NumberNode[\"default\"])(-1), (0, _Times[\"default\"])(node.left.value, node.right)), context);\n};\n\nvar moveRightNegateOut = function moveRightNegateOut(node, context) {\n  if (node.type !== 'times' || node.right.type !== 'negate') {\n    return;\n  }\n\n  return (0, _[\"default\"])((0, _Times[\"default\"])((0, _NumberNode[\"default\"])(-1), (0, _Times[\"default\"])(node.left, node.right.value)), context);\n};\n\nvar combinePowersNormalizer = function combinePowersNormalizer(node, context) {\n  if (node.type !== 'times') {\n    return;\n  }\n\n  return (0, _symbolicUtils.convertListToOperatorChain)('times', combinePowers((0, _symbolicUtils.convertOperatorChainToList)('times', node), context));\n};\n\nfunction combinePowers(nodes, context) {\n  var result = [];\n  var replaced = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (replaced.includes(i)) {\n      continue;\n    }\n\n    var leftItem = nodes[i];\n\n    for (var j = i + 1; j < nodes.length; j++) {\n      if (replaced.includes(j)) {\n        continue;\n      }\n\n      var rightItem = nodes[j];\n\n      if (leftItem.type === 'symbol' && rightItem.type === 'symbol' && leftItem.name === rightItem.name) {\n        replaced.push(i);\n        replaced.push(j);\n        result.push((0, _Power[\"default\"])(leftItem, (0, _NumberNode[\"default\"])(2)));\n      } else if (leftItem.type === 'symbol' && rightItem.type === 'power' && rightItem.left.type === 'symbol' && leftItem.name === rightItem.left.name) {\n        replaced.push(i);\n        replaced.push(j);\n        result.push((0, _Power[\"default\"])(leftItem, (0, _[\"default\"])((0, _Plus[\"default\"])((0, _NumberNode[\"default\"])(1), rightItem.right), context)));\n      } else if (rightItem.type === 'symbol' && leftItem.type === 'power' && leftItem.left.type === 'symbol' && rightItem.name === leftItem.left.name) {\n        replaced.push(i);\n        replaced.push(j);\n        result.push((0, _Power[\"default\"])(rightItem, (0, _[\"default\"])((0, _Plus[\"default\"])((0, _NumberNode[\"default\"])(1), leftItem.right), context)));\n      } else if (leftItem.type === 'power' && leftItem.left.type === 'symbol' && rightItem.type === 'power' && rightItem.left.type === 'symbol' && leftItem.left.name === rightItem.left.name) {\n        replaced.push(i);\n        replaced.push(j);\n        result.push((0, _Power[\"default\"])(leftItem.left, (0, _[\"default\"])((0, _Plus[\"default\"])(leftItem.right, rightItem.right), context)));\n      }\n    }\n\n    if (!replaced.includes(i)) {\n      result.push(leftItem);\n    }\n  }\n\n  return result.map(function (node) {\n    return (0, _[\"default\"])(node, context);\n  });\n}\n\nvar removeNeutralElement = function removeNeutralElement(node, context) {\n  if (node.type !== 'times' || node.left.type !== 'number' || node.left.value !== 1) {\n    return;\n  }\n\n  return (0, _[\"default\"])(node.right, context);\n};\n\nvar normalizeTimes = (0, _normalizeUtils.combineNormalizers)([evaluateIfPossible, normalizeChildren, moveVariablesRight, rotateIfLeftChildTimes, combineLeftChildWithRightChildLeftChild, distributeLeftChildPlus, distributeRightChildPlus, moveLeftNegateOut, moveRightNegateOut, combinePowersNormalizer, removeNeutralElement]);\nvar _default = normalizeTimes;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["evaluateIfPossible","node","context","normalizeChildren","type","left","right","moveVariablesRight","rotateIfLeftChildTimes","rotatedNode","combineLeftChildWithRightChildLeftChild","normalizedNode","distributeLeftChildPlus","distributeRightChildPlus","moveLeftNegateOut","value","moveRightNegateOut","combinePowersNormalizer","combinePowers","nodes","result","replaced","i","length","includes","leftItem","j","rightItem","name","push","map","removeNeutralElement","normalizeTimes"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/normalize/nodes/normalize-times.ts"],"sourcesContent":["import { Context } from './../../types/Context';\nimport { SyntaxTreeNode } from './../../types/SyntaxTreeNodes';\nimport normalize from '..';\nimport createPlus from '../../create/Plus';\nimport createTimes from '../../create/Times';\nimport evaluate from '../../eval';\nimport { combineNormalizers, PartialNormalizer } from '../../utils/normalize-utils';\nimport { containsVariables, convertListToOperatorChain, convertOperatorChainToList } from '../../utils/symbolic-utils';\nimport createPower from '../../create/Power';\nimport createNumberNode from '../../create/NumberNode';\n\nconst evaluateIfPossible: PartialNormalizer = (node, context) => {\n    if (!containsVariables(node, context)) {\n        return evaluate(node, context);\n    }\n};\n\nconst normalizeChildren: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times') {\n        return;\n    }\n\n    return createTimes(normalize(node.left, context), normalize(node.right, context));\n};\n\nconst moveVariablesRight: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times') {\n        return;\n    }\n\n    if (node.right.type === 'times') {\n        if (containsVariables(node.left, context) && !containsVariables(node.right.left, context)) {\n            return normalize(createTimes(node.right.left, createTimes(node.left, node.right.right)), context);\n        }\n    } else {\n        if (containsVariables(node.left, context) && !containsVariables(node.right, context)) {\n            return normalize(createTimes(node.right, node.left), context);\n        }\n    }\n};\n\nconst rotateIfLeftChildTimes: PartialNormalizer = (node, context) => {\n    if (!(node.type === 'times' && node.left.type === 'times')) {\n        return;\n    }\n\n    const rotatedNode = createTimes(node.left.left, createTimes(node.left.right, node.right));\n\n    return normalize(rotatedNode, context);\n};\n\nconst combineLeftChildWithRightChildLeftChild: PartialNormalizer = (node, context) => {\n    if (\n        !(\n            node.type === 'times' &&\n            !containsVariables(node.left, context) &&\n            node.right.type === 'times' &&\n            !containsVariables(node.right.left, context)\n        )\n    ) {\n        return;\n    }\n\n    const normalizedNode = createTimes(evaluate(createTimes(node.left, node.right.left), context), node.right.right);\n    return normalize(normalizedNode, context);\n};\n\nconst distributeLeftChildPlus: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times' || node.left.type !== 'plus') {\n        return;\n    }\n\n    return normalize(\n        createPlus(createTimes(node.left.left, node.right), createTimes(node.left.right, node.right)),\n        context,\n    );\n};\n\nconst distributeRightChildPlus: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times' || node.right.type !== 'plus') {\n        return;\n    }\n\n    return normalize(\n        createPlus(createTimes(node.left, node.right.left), createTimes(node.left, node.right.right)),\n        context,\n    );\n};\n\nconst moveLeftNegateOut: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times' || node.left.type !== 'negate') {\n        return;\n    }\n\n    return normalize(createTimes(createNumberNode(-1), createTimes(node.left.value, node.right)), context);\n};\n\nconst moveRightNegateOut: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times' || node.right.type !== 'negate') {\n        return;\n    }\n\n    return normalize(createTimes(createNumberNode(-1), createTimes(node.left, node.right.value)), context);\n};\n\nconst combinePowersNormalizer: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times') {\n        return;\n    }\n\n    return convertListToOperatorChain('times', combinePowers(convertOperatorChainToList('times', node), context));\n};\n\nfunction combinePowers(nodes: SyntaxTreeNode[], context: Context): SyntaxTreeNode[] {\n    const result: SyntaxTreeNode[] = [];\n    const replaced: number[] = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n        if (replaced.includes(i)) {\n            continue;\n        }\n\n        const leftItem = nodes[i];\n\n        for (let j = i + 1; j < nodes.length; j++) {\n            if (replaced.includes(j)) {\n                continue;\n            }\n\n            const rightItem = nodes[j];\n\n            if (leftItem.type === 'symbol' && rightItem.type === 'symbol' && leftItem.name === rightItem.name) {\n                replaced.push(i);\n                replaced.push(j);\n                result.push(createPower(leftItem, createNumberNode(2)));\n            } else if (\n                leftItem.type === 'symbol' &&\n                rightItem.type === 'power' &&\n                rightItem.left.type === 'symbol' &&\n                leftItem.name === rightItem.left.name\n            ) {\n                replaced.push(i);\n                replaced.push(j);\n                result.push(\n                    createPower(leftItem, normalize(createPlus(createNumberNode(1), rightItem.right), context)),\n                );\n            } else if (\n                rightItem.type === 'symbol' &&\n                leftItem.type === 'power' &&\n                leftItem.left.type === 'symbol' &&\n                rightItem.name === leftItem.left.name\n            ) {\n                replaced.push(i);\n                replaced.push(j);\n                result.push(\n                    createPower(rightItem, normalize(createPlus(createNumberNode(1), leftItem.right), context)),\n                );\n            } else if (\n                leftItem.type === 'power' &&\n                leftItem.left.type === 'symbol' &&\n                rightItem.type === 'power' &&\n                rightItem.left.type === 'symbol' &&\n                leftItem.left.name === rightItem.left.name\n            ) {\n                replaced.push(i);\n                replaced.push(j);\n                result.push(\n                    createPower(leftItem.left, normalize(createPlus(leftItem.right, rightItem.right), context)),\n                );\n            }\n        }\n\n        if (!replaced.includes(i)) {\n            result.push(leftItem);\n        }\n    }\n\n    return result.map((node) => normalize(node, context));\n}\n\nconst removeNeutralElement: PartialNormalizer = (node, context) => {\n    if (node.type !== 'times' || node.left.type !== 'number' || node.left.value !== 1) {\n        return;\n    }\n\n    return normalize(node.right, context);\n};\n\nconst normalizeTimes = combineNormalizers([\n    evaluateIfPossible,\n    normalizeChildren,\n    moveVariablesRight,\n    rotateIfLeftChildTimes,\n    combineLeftChildWithRightChildLeftChild,\n    distributeLeftChildPlus,\n    distributeRightChildPlus,\n    moveLeftNegateOut,\n    moveRightNegateOut,\n    combinePowersNormalizer,\n    removeNeutralElement,\n]);\n\nexport default normalizeTimes;\n"]},"metadata":{},"sourceType":"script"}
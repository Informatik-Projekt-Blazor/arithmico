{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluateLess;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _BooleanNode = _interopRequireDefault(require(\"../../create/BooleanNode\"));\n\nvar _Less = _interopRequireDefault(require(\"../../create/Less\"));\n\nvar _composeFunctionUtils = require(\"../../utils/compose-function-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluateLess(node, context) {\n  var leftChild = (0, _[\"default\"])(node.left, context);\n  var rightChild = (0, _[\"default\"])(node.right, context);\n\n  if (leftChild.type === 'number' && rightChild.type === 'number' && context.options.config.operators.lessNumberNumber) {\n    return (0, _BooleanNode[\"default\"])(leftChild.value < rightChild.value);\n  } else if (leftChild.type === 'function' && rightChild.type === 'function' && context.options.config.operators.lessFunctionFunction) {\n    return (0, _composeFunctionUtils.createBinaryOperatorFunctionComposition)(leftChild, rightChild, _Less[\"default\"], context);\n  }\n\n  throw \"TypeError: <\".concat(leftChild.type, \"> < <\").concat(rightChild.type, \"> is not defined\");\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAEe,SAASA,YAAT,CAAsBC,IAAtB,EAAkCC,OAAlC,EAAoE;EAC/E,IAAMC,SAAS,GAAG,kBAASF,IAAI,CAACG,IAAd,EAAoBF,OAApB,CAAlB;EACA,IAAMG,UAAU,GAAG,kBAASJ,IAAI,CAACK,KAAd,EAAqBJ,OAArB,CAAnB;;EAEA,IACIC,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,QADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCS,gBAHrC,EAIE;IACE,OAAO,6BAAkBR,SAAS,CAACS,KAAVT,GAAkBE,UAAU,CAACO,KAA/C,CAAP;EALJ,OAMO,IACHT,SAAS,CAACI,IAAVJ,KAAmB,UAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,UADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCW,oBAH9B,EAIL;IACE,OAAO,mEAAwCV,SAAxC,EAAmDE,UAAnD,EAA+DS,gBAA/D,EAA2EZ,OAA3E,CAAP;EACH;;EAED,4BAAqBC,SAAS,CAACI,IAA/B,kBAA2CF,UAAU,CAACE,IAAtD;AACH","names":["evaluateLess","node","context","leftChild","left","rightChild","right","type","options","config","operators","lessNumberNumber","value","lessFunctionFunction","createLess"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/nodes/Less.ts"],"sourcesContent":["import evaluate from '..';\nimport createBooleanNode from '../../create/BooleanNode';\nimport createLess from '../../create/Less';\nimport { Less, Context, SyntaxTreeNode } from '../../types';\nimport { createBinaryOperatorFunctionComposition } from '../../utils/compose-function-utils';\n\nexport default function evaluateLess(node: Less, context: Context): SyntaxTreeNode {\n    const leftChild = evaluate(node.left, context);\n    const rightChild = evaluate(node.right, context);\n\n    if (\n        leftChild.type === 'number' &&\n        rightChild.type === 'number' &&\n        context.options.config.operators.lessNumberNumber\n    ) {\n        return createBooleanNode(leftChild.value < rightChild.value);\n    } else if (\n        leftChild.type === 'function' &&\n        rightChild.type === 'function' &&\n        context.options.config.operators.lessFunctionFunction\n    ) {\n        return createBinaryOperatorFunctionComposition(leftChild, rightChild, createLess, context);\n    }\n\n    throw `TypeError: <${leftChild.type}> < <${rightChild.type}> is not defined`;\n}\n"]},"metadata":{},"sourceType":"script"}
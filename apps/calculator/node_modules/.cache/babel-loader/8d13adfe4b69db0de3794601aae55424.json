{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluatePower;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _NumberNode = _interopRequireDefault(require(\"../../create/NumberNode\"));\n\nvar _Power = _interopRequireDefault(require(\"../../create/Power\"));\n\nvar _composeFunctionUtils = require(\"../../utils/compose-function-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluatePower(node, context) {\n  var leftChild = (0, _[\"default\"])(node.left, context);\n  var rightChild = (0, _[\"default\"])(node.right, context);\n\n  if (leftChild.type === 'number' && rightChild.type === 'number' && context.options.config.operators.powerNumberNumber) {\n    if (leftChild.value === 0 && rightChild.value < 0) {\n      throw \"ArithmeticError: division by zero is not allowed\";\n    }\n\n    return (0, _NumberNode[\"default\"])(Math.pow(leftChild.value, rightChild.value));\n  } else if (leftChild.type === 'function' && rightChild.type === 'function' && context.options.config.operators.powerFunctionFunction) {\n    return (0, _composeFunctionUtils.createBinaryOperatorFunctionComposition)(leftChild, rightChild, _Power[\"default\"], context);\n  }\n\n  throw \"TypeError: <\".concat(leftChild.type, \"> ^ <\").concat(rightChild.type, \"> is not defined\");\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAEe,SAASA,aAAT,CAAuBC,IAAvB,EAAoCC,OAApC,EAAsE;EACjF,IAAMC,SAAS,GAAG,kBAASF,IAAI,CAACG,IAAd,EAAoBF,OAApB,CAAlB;EACA,IAAMG,UAAU,GAAG,kBAASJ,IAAI,CAACK,KAAd,EAAqBJ,OAArB,CAAnB;;EAEA,IACIC,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,QADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCS,iBAHrC,EAIE;IACE,IAAIR,SAAS,CAACS,KAAVT,KAAoB,CAApBA,IAAyBE,UAAU,CAACO,KAAXP,GAAmB,CAAhD,EAAmD;MAC/C;IACH;;IAED,OAAO,4BAAiBQ,IAAI,CAACC,GAALD,CAASV,SAAS,CAACS,KAAnBC,EAA0BR,UAAU,CAACO,KAArCC,CAAjB,CAAP;EATJ,OAUO,IACHV,SAAS,CAACI,IAAVJ,KAAmB,UAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,UADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCa,qBAH9B,EAIL;IACE,OAAO,mEAAwCZ,SAAxC,EAAmDE,UAAnD,EAA+DW,iBAA/D,EAA4Ed,OAA5E,CAAP;EACH;;EAED,4BAAqBC,SAAS,CAACI,IAA/B,kBAA2CF,UAAU,CAACE,IAAtD;AACH","names":["evaluatePower","node","context","leftChild","left","rightChild","right","type","options","config","operators","powerNumberNumber","value","Math","pow","powerFunctionFunction","createPower"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/nodes/Power.ts"],"sourcesContent":["import evaluate from '..';\nimport createNumberNode from '../../create/NumberNode';\nimport createPower from '../../create/Power';\nimport { Power, Context, SyntaxTreeNode } from '../../types';\nimport { createBinaryOperatorFunctionComposition } from '../../utils/compose-function-utils';\n\nexport default function evaluatePower(node: Power, context: Context): SyntaxTreeNode {\n    const leftChild = evaluate(node.left, context);\n    const rightChild = evaluate(node.right, context);\n\n    if (\n        leftChild.type === 'number' &&\n        rightChild.type === 'number' &&\n        context.options.config.operators.powerNumberNumber\n    ) {\n        if (leftChild.value === 0 && rightChild.value < 0) {\n            throw `ArithmeticError: division by zero is not allowed`;\n        }\n\n        return createNumberNode(Math.pow(leftChild.value, rightChild.value));\n    } else if (\n        leftChild.type === 'function' &&\n        rightChild.type === 'function' &&\n        context.options.config.operators.powerFunctionFunction\n    ) {\n        return createBinaryOperatorFunctionComposition(leftChild, rightChild, createPower, context);\n    }\n\n    throw `TypeError: <${leftChild.type}> ^ <${rightChild.type}> is not defined`;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEquationLinear = isEquationLinear;\n\nvar _symbolicUtils = require(\"../../../../utils/symbolic-utils\");\n\nvar _getFactors = require(\"./get-factors\");\n\nvar _getSummands = require(\"./get-summands\");\n\nfunction isSummandLinear(summand, context) {\n  var factors = (0, _getFactors.getFactors)(summand);\n\n  if (!(0, _symbolicUtils.containsVariables)(summand, context)) {\n    return true;\n  }\n\n  if ((0, _symbolicUtils.getVariableNames)(summand, context).length > 1) {\n    return false;\n  }\n\n  return factors.every(function (factor) {\n    if (!(0, _symbolicUtils.containsVariables)(factor, context)) {\n      return true;\n    }\n\n    if ((0, _symbolicUtils.getVariableNames)(factor, context).length > 1) {\n      return false;\n    }\n\n    if (factor.type === 'power' && (0, _symbolicUtils.containsVariables)(factor.left, context) && (factor.right.type !== 'number' || factor.right.value !== 1)) {\n      return false;\n    }\n\n    return true;\n  });\n}\n\nfunction isEquationLinear(node, context) {\n  return (0, _getSummands.getSummands)(node).every(function (summand) {\n    return isSummandLinear(summand, context);\n  });\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA,SAASA,eAAT,CAAyBC,OAAzB,EAAkDC,OAAlD,EAA6E;EACzE,IAAMC,OAAO,GAAG,4BAAWF,OAAX,CAAhB;;EAEA,IAAI,CAAC,sCAAkBA,OAAlB,EAA2BC,OAA3B,CAAL,EAA0C;IACtC,OAAO,IAAP;EACH;;EAED,IAAI,qCAAiBD,OAAjB,EAA0BC,OAA1B,EAAmCE,MAAnC,GAA4C,CAAhD,EAAmD;IAC/C,OAAO,KAAP;EACH;;EAED,OAAOD,OAAO,CAACE,KAARF,CAAc,UAACG,MAAD,EAAY;IAC7B,IAAI,CAAC,sCAAkBA,MAAlB,EAA0BJ,OAA1B,CAAL,EAAyC;MACrC,OAAO,IAAP;IACH;;IAED,IAAI,qCAAiBI,MAAjB,EAAyBJ,OAAzB,EAAkCE,MAAlC,GAA2C,CAA/C,EAAkD;MAC9C,OAAO,KAAP;IACH;;IAED,IACIE,MAAM,CAACC,IAAPD,KAAgB,OAAhBA,IACA,sCAAkBA,MAAM,CAACE,IAAzB,EAA+BN,OAA/B,CADAI,KAECA,MAAM,CAACG,KAAPH,CAAaC,IAAbD,KAAsB,QAAtBA,IAAkCA,MAAM,CAACG,KAAPH,CAAaI,KAAbJ,KAAuB,CAF1DA,CADJ,EAIE;MACE,OAAO,KAAP;IACH;;IAED,OAAO,IAAP;EAjBG,EAAP;AAmBH;;AAEM,SAASK,gBAAT,CAA0BC,IAA1B,EAAwCV,OAAxC,EAAmE;EACtE,OAAO,8BAAYU,IAAZ,EAAkBP,KAAlB,CAAwB,UAACJ,OAAD;IAAA,OAAaD,eAAe,CAACC,OAAD,EAAUC,OAAV,CAA5B;EAAxB,EAAP;AACH","names":["isSummandLinear","summand","context","factors","length","every","factor","type","left","right","value","isEquationLinear","node"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/lsolve/utils/check-linear.ts"],"sourcesContent":["import { Context, Equals, SyntaxTreeNode } from '../../../../types';\nimport { containsVariables, getVariableNames } from '../../../../utils/symbolic-utils';\nimport { getFactors } from './get-factors';\nimport { getSummands } from './get-summands';\n\nfunction isSummandLinear(summand: SyntaxTreeNode, context: Context): boolean {\n    const factors = getFactors(summand);\n\n    if (!containsVariables(summand, context)) {\n        return true;\n    }\n\n    if (getVariableNames(summand, context).length > 1) {\n        return false;\n    }\n\n    return factors.every((factor) => {\n        if (!containsVariables(factor, context)) {\n            return true;\n        }\n\n        if (getVariableNames(factor, context).length > 1) {\n            return false;\n        }\n\n        if (\n            factor.type === 'power' &&\n            containsVariables(factor.left, context) &&\n            (factor.right.type !== 'number' || factor.right.value !== 1)\n        ) {\n            return false;\n        }\n\n        return true;\n    });\n}\n\nexport function isEquationLinear(node: Equals, context: Context): boolean {\n    return getSummands(node).every((summand) => isSummandLinear(summand, context));\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _NumberNode = _interopRequireDefault(require(\"../../../create/NumberNode\"));\n\nvar _binco = require(\"../../../utils/binco\");\n\nvar _parameterUtils = require(\"../../../utils/parameter-utils\");\n\nvar _pluginBuilder = require(\"../../../utils/plugin-builder\");\n\nvar _avg = require(\"./utils/avg\");\n\nvar _binomial = require(\"./utils/binomial\");\n\nvar _erf = require(\"./utils/erf\");\n\nvar _fact = require(\"./utils/fact\");\n\nvar _normal = require(\"./utils/normal\");\n\nvar _sd = require(\"./utils/sd\");\n\nvar _var = require(\"./utils/var\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar statisticsPlugin = (0, _pluginBuilder.createPlugin)('statistics');\n(0, _pluginBuilder.addPluginDescription)(statisticsPlugin, 'adds erf, normal, cnormal, binco, binom, cbinom functions');\n(0, _pluginBuilder.addPluginAuthor)(statisticsPlugin, 'core');\nvar singleNumberHeader = [{\n  name: 'x',\n  type: 'number',\n  evaluate: true\n}];\nvar numberSeriesHeader = [{\n  name: 'x',\n  type: 'number',\n  evaluate: true,\n  repeat: true\n}];\nvar bincoHeader = [{\n  name: 'n',\n  type: 'number',\n  evaluate: true\n}, {\n  name: 'k',\n  type: 'number',\n  evaluate: true\n}];\nvar binomHeader = [{\n  name: 'n',\n  type: 'number',\n  evaluate: true\n}, {\n  name: 'p',\n  type: 'number',\n  evaluate: true\n}, {\n  name: 'k',\n  type: 'number',\n  evaluate: true\n}];\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('erf', singleNumberHeader, 'Gaussian error function', 'Gaußsche Fehlerfunktion', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('erf', parameters, singleNumberHeader, context);\n  var x = parameterStackFrame['x'].value;\n  return (0, _NumberNode[\"default\"])((0, _erf.calculateErf)(x));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('fact', singleNumberHeader, 'Calculates the factorial of x', 'Berechnet die Fakultät von x.', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('fact', parameters, singleNumberHeader, context);\n  var x = parameterStackFrame['x'].value;\n  return (0, _NumberNode[\"default\"])((0, _fact.calculateFact)(x));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('normal', singleNumberHeader, 'normal distribution', 'Normalverteilung', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('normal', parameters, singleNumberHeader, context);\n  var x = parameterStackFrame['x'].value;\n  return (0, _NumberNode[\"default\"])((0, _normal.calculateNormal)(x));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('cnormal', singleNumberHeader, 'Cumulative normal distribution', 'Kumulative Normalverteilung', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('cnormal', parameters, singleNumberHeader, context);\n  var x = parameterStackFrame['x'].value;\n  return (0, _NumberNode[\"default\"])((0, _normal.calculateCNormal)(x));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('binco', bincoHeader, 'Computes n over k (binomial coefficient)', 'Berechnet n über k (Binomialkoeffizient)', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('binco', parameters, bincoHeader, context);\n  var n = parameterStackFrame['n'].value;\n  var k = parameterStackFrame['k'].value;\n  (0, _binomial.checkNK)('binco', n, k);\n  return (0, _NumberNode[\"default\"])((0, _binco.binco)(n, k));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('binom', binomHeader, 'Binomial distribution', 'Binomialverteilung', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('binom', parameters, binomHeader, context);\n  var n = parameterStackFrame['n'].value;\n  var p = parameterStackFrame['p'].value;\n  var k = parameterStackFrame['k'].value;\n  return (0, _NumberNode[\"default\"])((0, _binomial.calculateBinom)(n, p, k));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('cbinom', binomHeader, 'Cumulative binomial distribution', 'Kumulative Binomialverteilung', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('cbinom', parameters, binomHeader, context);\n  var n = parameterStackFrame['n'].value;\n  var p = parameterStackFrame['p'].value;\n  var k = parameterStackFrame['k'].value;\n  return (0, _NumberNode[\"default\"])((0, _binomial.calculateCBinom)(n, p, k));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('avg', numberSeriesHeader, 'Calculates the arithmetic mean', 'Berechnet das arithmetische Mittel', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('avg', parameters, numberSeriesHeader, context);\n  var xs = Object.values(parameterStackFrame).map(function (x) {\n    return x.value;\n  });\n  return (0, _NumberNode[\"default\"])((0, _avg.calculateAvg)(xs));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('var', numberSeriesHeader, 'Calculates the variance', 'Berechnet die Varianz', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('var', parameters, numberSeriesHeader, context);\n  var xs = Object.values(parameterStackFrame).map(function (x) {\n    return x.value;\n  });\n  return (0, _NumberNode[\"default\"])((0, _var.calculateVar)(xs));\n}));\n(0, _pluginBuilder.addPluginFunction)(statisticsPlugin, (0, _pluginBuilder.createPluginFunction)('sd', numberSeriesHeader, 'Calculates the standard deviation', 'Berechnet die Standardabweichung', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('sd', parameters, numberSeriesHeader, context);\n  var xs = Object.values(parameterStackFrame).map(function (x) {\n    return x.value;\n  });\n  return (0, _NumberNode[\"default\"])((0, _sd.calculateSd)(xs));\n}));\nvar _default = statisticsPlugin;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["statisticsPlugin","singleNumberHeader","name","type","evaluate","numberSeriesHeader","repeat","bincoHeader","binomHeader","parameters","context","parameterStackFrame","x","value","n","k","p","xs","Object","values","map"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/statistics/statistics.ts"],"sourcesContent":["import createNumberNode from '../../../create/NumberNode';\nimport { FunctionHeaderItem, NumberNode } from '../../../types/SyntaxTreeNodes';\nimport { binco } from '../../../utils/binco';\nimport { mapParametersToStackFrame } from '../../../utils/parameter-utils';\nimport {\n    addPluginAuthor,\n    addPluginDescription,\n    addPluginFunction,\n    createPlugin,\n    createPluginFunction,\n} from '../../../utils/plugin-builder';\nimport { calculateAvg } from './utils/avg';\nimport { calculateBinom, calculateCBinom, checkNK } from './utils/binomial';\nimport { calculateErf } from './utils/erf';\nimport { calculateFact } from './utils/fact';\nimport { calculateCNormal, calculateNormal } from './utils/normal';\nimport { calculateSd } from './utils/sd';\nimport { calculateVar } from './utils/var';\nconst statisticsPlugin = createPlugin('statistics');\naddPluginDescription(statisticsPlugin, 'adds erf, normal, cnormal, binco, binom, cbinom functions');\naddPluginAuthor(statisticsPlugin, 'core');\nconst singleNumberHeader: FunctionHeaderItem[] = [{ name: 'x', type: 'number', evaluate: true }];\nconst numberSeriesHeader: FunctionHeaderItem[] = [{ name: 'x', type: 'number', evaluate: true, repeat: true }];\n\nconst bincoHeader: FunctionHeaderItem[] = [\n    { name: 'n', type: 'number', evaluate: true },\n    { name: 'k', type: 'number', evaluate: true },\n];\n\nconst binomHeader: FunctionHeaderItem[] = [\n    { name: 'n', type: 'number', evaluate: true },\n    { name: 'p', type: 'number', evaluate: true },\n    { name: 'k', type: 'number', evaluate: true },\n];\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'erf',\n        singleNumberHeader,\n        'Gaussian error function',\n        'Gaußsche Fehlerfunktion',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('erf', parameters, singleNumberHeader, context);\n            const x = (<NumberNode>parameterStackFrame['x']).value;\n            return createNumberNode(calculateErf(x));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'fact',\n        singleNumberHeader,\n        'Calculates the factorial of x',\n        'Berechnet die Fakultät von x.',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('fact', parameters, singleNumberHeader, context);\n            const x = (<NumberNode>parameterStackFrame['x']).value;\n            return createNumberNode(calculateFact(x));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'normal',\n        singleNumberHeader,\n        'normal distribution',\n        'Normalverteilung',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('normal', parameters, singleNumberHeader, context);\n            const x = (<NumberNode>parameterStackFrame['x']).value;\n            return createNumberNode(calculateNormal(x));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'cnormal',\n        singleNumberHeader,\n        'Cumulative normal distribution',\n        'Kumulative Normalverteilung',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('cnormal', parameters, singleNumberHeader, context);\n            const x = (<NumberNode>parameterStackFrame['x']).value;\n            return createNumberNode(calculateCNormal(x));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'binco',\n        bincoHeader,\n        'Computes n over k (binomial coefficient)',\n        'Berechnet n über k (Binomialkoeffizient)',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('binco', parameters, bincoHeader, context);\n            const n = (<NumberNode>parameterStackFrame['n']).value;\n            const k = (<NumberNode>parameterStackFrame['k']).value;\n            checkNK('binco', n, k);\n            return createNumberNode(binco(n, k));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction('binom', binomHeader, 'Binomial distribution', 'Binomialverteilung', (parameters, context) => {\n        const parameterStackFrame = mapParametersToStackFrame('binom', parameters, binomHeader, context);\n        const n = (<NumberNode>parameterStackFrame['n']).value;\n        const p = (<NumberNode>parameterStackFrame['p']).value;\n        const k = (<NumberNode>parameterStackFrame['k']).value;\n        return createNumberNode(calculateBinom(n, p, k));\n    }),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'cbinom',\n        binomHeader,\n\n        'Cumulative binomial distribution',\n        'Kumulative Binomialverteilung',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('cbinom', parameters, binomHeader, context);\n            const n = (<NumberNode>parameterStackFrame['n']).value;\n            const p = (<NumberNode>parameterStackFrame['p']).value;\n            const k = (<NumberNode>parameterStackFrame['k']).value;\n            return createNumberNode(calculateCBinom(n, p, k));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'avg',\n        numberSeriesHeader,\n        'Calculates the arithmetic mean',\n        'Berechnet das arithmetische Mittel',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('avg', parameters, numberSeriesHeader, context);\n            const xs = Object.values(parameterStackFrame).map((x) => (<NumberNode>x).value);\n            return createNumberNode(calculateAvg(xs));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'var',\n        numberSeriesHeader,\n        'Calculates the variance',\n        'Berechnet die Varianz',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('var', parameters, numberSeriesHeader, context);\n            const xs = Object.values(parameterStackFrame).map((x) => (<NumberNode>x).value);\n            return createNumberNode(calculateVar(xs));\n        },\n    ),\n);\n\naddPluginFunction(\n    statisticsPlugin,\n    createPluginFunction(\n        'sd',\n        numberSeriesHeader,\n        'Calculates the standard deviation',\n        'Berechnet die Standardabweichung',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('sd', parameters, numberSeriesHeader, context);\n            const xs = Object.values(parameterStackFrame).map((x) => (<NumberNode>x).value);\n            return createNumberNode(calculateSd(xs));\n        },\n    ),\n);\n\nexport default statisticsPlugin;\n"]},"metadata":{},"sourceType":"script"}
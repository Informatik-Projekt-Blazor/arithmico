{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluateNegate;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _BooleanNode = _interopRequireDefault(require(\"../../create/BooleanNode\"));\n\nvar _FunctionCall = _interopRequireDefault(require(\"../../create/FunctionCall\"));\n\nvar _Lambda = _interopRequireDefault(require(\"../../create/Lambda\"));\n\nvar _Negate = _interopRequireDefault(require(\"../../create/Negate\"));\n\nvar _NumberNode = _interopRequireDefault(require(\"../../create/NumberNode\"));\n\nvar _SymbolNode = _interopRequireDefault(require(\"../../create/SymbolNode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluateNegate(node, context) {\n  var value = (0, _[\"default\"])(node.value, context);\n\n  if (value.type === 'boolean' && context.options.config.operators.negateBoolean) {\n    return (0, _BooleanNode[\"default\"])(!value.value);\n  } else if (value.type === 'number' && context.options.config.operators.negateNumber) {\n    return (0, _NumberNode[\"default\"])(-value.value);\n  } else if (value.type === 'function' && context.options.config.operators.negateFunction) {\n    return (0, _[\"default\"])((0, _Lambda[\"default\"])(value.header, (0, _Negate[\"default\"])((0, _FunctionCall[\"default\"])(value, value.header.map(function (headerItem) {\n      return (0, _SymbolNode[\"default\"])(headerItem.name);\n    })))), context);\n  }\n\n  throw \"TypeError: - <\".concat(value.type, \"> is not defined\");\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGe,SAASA,cAAT,CAAwBC,IAAxB,EAAsCC,OAAtC,EAAwE;EACnF,IAAMC,KAAK,GAAG,kBAASF,IAAI,CAACE,KAAd,EAAqBD,OAArB,CAAd;;EAEA,IAAIC,KAAK,CAACC,IAAND,KAAe,SAAfA,IAA4BD,OAAO,CAACG,OAARH,CAAgBI,MAAhBJ,CAAuBK,SAAvBL,CAAiCM,aAAjE,EAAgF;IAC5E,OAAO,6BAAkB,CAACL,KAAK,CAACA,KAAzB,CAAP;EADJ,OAEO,IAAIA,KAAK,CAACC,IAAND,KAAe,QAAfA,IAA2BD,OAAO,CAACG,OAARH,CAAgBI,MAAhBJ,CAAuBK,SAAvBL,CAAiCO,YAAhE,EAA8E;IACjF,OAAO,4BAAiB,CAACN,KAAK,CAACA,KAAxB,CAAP;EADG,OAEA,IAAIA,KAAK,CAACC,IAAND,KAAe,UAAfA,IAA6BD,OAAO,CAACG,OAARH,CAAgBI,MAAhBJ,CAAuBK,SAAvBL,CAAiCQ,cAAlE,EAAkF;IACrF,OAAO,kBACH,wBACIP,KAAK,CAACQ,MADV,EAEI,wBACI,8BACIR,KADJ,EAEIA,KAAK,CAACQ,MAANR,CAAaS,GAAbT,CAAiB,UAACU,UAAD;MAAA,OAAgB,4BAAiBA,UAAU,CAACC,IAA5B,CAAhB;IAAjB,EAFJ,CADJ,CAFJ,CADG,EAUHZ,OAVG,CAAP;EAYH;;EAED,8BAAuBC,KAAK,CAACC,IAA7B;AACH","names":["evaluateNegate","node","context","value","type","options","config","operators","negateBoolean","negateNumber","negateFunction","header","map","headerItem","name"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/nodes/Negate.ts"],"sourcesContent":["import evaluate from '..';\nimport createBooleanNode from '../../create/BooleanNode';\nimport createFunctionCall from '../../create/FunctionCall';\nimport createLambda from '../../create/Lambda';\nimport createNegate from '../../create/Negate';\nimport createNumberNode from '../../create/NumberNode';\nimport createSymbolNode from '../../create/SymbolNode';\nimport { Negate, Context, SyntaxTreeNode } from '../../types';\n\nexport default function evaluateNegate(node: Negate, context: Context): SyntaxTreeNode {\n    const value = evaluate(node.value, context);\n\n    if (value.type === 'boolean' && context.options.config.operators.negateBoolean) {\n        return createBooleanNode(!value.value);\n    } else if (value.type === 'number' && context.options.config.operators.negateNumber) {\n        return createNumberNode(-value.value);\n    } else if (value.type === 'function' && context.options.config.operators.negateFunction) {\n        return evaluate(\n            createLambda(\n                value.header,\n                createNegate(\n                    createFunctionCall(\n                        value,\n                        value.header.map((headerItem) => createSymbolNode(headerItem.name)),\n                    ),\n                ),\n            ),\n            context,\n        );\n    }\n\n    throw `TypeError: - <${value.type}> is not defined`;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluateGreaterOrEquals;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _BooleanNode = _interopRequireDefault(require(\"../../create/BooleanNode\"));\n\nvar _GreaterOrEquals = _interopRequireDefault(require(\"../../create/GreaterOrEquals\"));\n\nvar _composeFunctionUtils = require(\"../../utils/compose-function-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluateGreaterOrEquals(node, context) {\n  var leftChild = (0, _[\"default\"])(node.left, context);\n  var rightChild = (0, _[\"default\"])(node.right, context);\n\n  if (leftChild.type === 'number' && rightChild.type === 'number' && context.options.config.operators.greaterOrEqualsNumberNumber) {\n    return (0, _BooleanNode[\"default\"])(leftChild.value >= rightChild.value);\n  } else if (leftChild.type === 'function' && rightChild.type === 'function' && context.options.config.operators.greaterOrEqualsFunctionFunction) {\n    return (0, _composeFunctionUtils.createBinaryOperatorFunctionComposition)(leftChild, rightChild, _GreaterOrEquals[\"default\"], context);\n  }\n\n  throw \"TypeError: <\".concat(leftChild.type, \"> >= <\").concat(rightChild.type, \"> is not defined\");\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAEe,SAASA,uBAAT,CAAiCC,IAAjC,EAAwDC,OAAxD,EAA0F;EACrG,IAAMC,SAAS,GAAG,kBAASF,IAAI,CAACG,IAAd,EAAoBF,OAApB,CAAlB;EACA,IAAMG,UAAU,GAAG,kBAASJ,IAAI,CAACK,KAAd,EAAqBJ,OAArB,CAAnB;;EAEA,IACIC,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,QADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCS,2BAHrC,EAIE;IACE,OAAO,6BAAkBR,SAAS,CAACS,KAAVT,IAAmBE,UAAU,CAACO,KAAhD,CAAP;EALJ,OAMO,IACHT,SAAS,CAACI,IAAVJ,KAAmB,UAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,UADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCW,+BAH9B,EAIL;IACE,OAAO,mEAAwCV,SAAxC,EAAmDE,UAAnD,EAA+DS,2BAA/D,EAAsFZ,OAAtF,CAAP;EACH;;EAED,4BAAqBC,SAAS,CAACI,IAA/B,mBAA4CF,UAAU,CAACE,IAAvD;AACH","names":["evaluateGreaterOrEquals","node","context","leftChild","left","rightChild","right","type","options","config","operators","greaterOrEqualsNumberNumber","value","greaterOrEqualsFunctionFunction","createGreaterOrEquals"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/nodes/GreaterOrEquals.ts"],"sourcesContent":["import evaluate from '..';\nimport createBooleanNode from '../../create/BooleanNode';\nimport createGreaterOrEquals from '../../create/GreaterOrEquals';\nimport { GreaterOrEquals, Context, SyntaxTreeNode } from '../../types';\nimport { createBinaryOperatorFunctionComposition } from '../../utils/compose-function-utils';\n\nexport default function evaluateGreaterOrEquals(node: GreaterOrEquals, context: Context): SyntaxTreeNode {\n    const leftChild = evaluate(node.left, context);\n    const rightChild = evaluate(node.right, context);\n\n    if (\n        leftChild.type === 'number' &&\n        rightChild.type === 'number' &&\n        context.options.config.operators.greaterOrEqualsNumberNumber\n    ) {\n        return createBooleanNode(leftChild.value >= rightChild.value);\n    } else if (\n        leftChild.type === 'function' &&\n        rightChild.type === 'function' &&\n        context.options.config.operators.greaterOrEqualsFunctionFunction\n    ) {\n        return createBinaryOperatorFunctionComposition(leftChild, rightChild, createGreaterOrEquals, context);\n    }\n\n    throw `TypeError: <${leftChild.type}> >= <${rightChild.type}> is not defined`;\n}\n"]},"metadata":{},"sourceType":"script"}
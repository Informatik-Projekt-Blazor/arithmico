{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.needsBrackets = needsBrackets;\nexports[\"default\"] = serialize;\n\nvar _And = _interopRequireDefault(require(\"./nodes/And\"));\n\nvar _Divided = _interopRequireDefault(require(\"./nodes/Divided\"));\n\nvar _Equals = _interopRequireDefault(require(\"./nodes/Equals\"));\n\nvar _Function = _interopRequireDefault(require(\"./nodes/Function\"));\n\nvar _FunctionCall = _interopRequireDefault(require(\"./nodes/FunctionCall\"));\n\nvar _Greater = _interopRequireDefault(require(\"./nodes/Greater\"));\n\nvar _GreaterOrEquals = _interopRequireDefault(require(\"./nodes/GreaterOrEquals\"));\n\nvar _Less = _interopRequireDefault(require(\"./nodes/Less\"));\n\nvar _LessOrEqual = _interopRequireDefault(require(\"./nodes/LessOrEqual\"));\n\nvar _Minus = _interopRequireDefault(require(\"./nodes/Minus\"));\n\nvar _Negate = _interopRequireDefault(require(\"./nodes/Negate\"));\n\nvar _Number = _interopRequireDefault(require(\"./nodes/Number\"));\n\nvar _Or = _interopRequireDefault(require(\"./nodes/Or\"));\n\nvar _Plus = _interopRequireDefault(require(\"./nodes/Plus\"));\n\nvar _Power = _interopRequireDefault(require(\"./nodes/Power\"));\n\nvar _Times = _interopRequireDefault(require(\"./nodes/Times\"));\n\nvar _Vector = _interopRequireDefault(require(\"./nodes/Vector\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar serializePrecedents = ['define', 'function', 'or', 'and', 'equals', 'less', 'greater', 'lessOrEquals', 'greaterOrEquals', 'plus', 'minus', 'negate', 'times', 'divided', 'power', 'functionCall', 'vector', 'symbol', 'boolean', 'number'];\n\nfunction needsBrackets(parentType, childType) {\n  var bracketsOnEqualPrecedence = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return bracketsOnEqualPrecedence ? serializePrecedents.indexOf(childType) <= serializePrecedents.indexOf(parentType) : serializePrecedents.indexOf(childType) < serializePrecedents.indexOf(parentType);\n}\n\nfunction serialize(node, options) {\n  switch (node.type) {\n    case 'or':\n      return (0, _Or[\"default\"])(node, options);\n\n    case 'and':\n      return (0, _And[\"default\"])(node, options);\n\n    case 'equals':\n      return (0, _Equals[\"default\"])(node, options);\n\n    case 'less':\n      return (0, _Less[\"default\"])(node, options);\n\n    case 'greater':\n      return (0, _Greater[\"default\"])(node, options);\n\n    case 'lessOrEquals':\n      return (0, _LessOrEqual[\"default\"])(node, options);\n\n    case 'greaterOrEquals':\n      return (0, _GreaterOrEquals[\"default\"])(node, options);\n\n    case 'plus':\n      return (0, _Plus[\"default\"])(node, options);\n\n    case 'minus':\n      return (0, _Minus[\"default\"])(node, options);\n\n    case 'negate':\n      return (0, _Negate[\"default\"])(node, options);\n\n    case 'times':\n      return (0, _Times[\"default\"])(node, options);\n\n    case 'divided':\n      return (0, _Divided[\"default\"])(node, options);\n\n    case 'power':\n      return (0, _Power[\"default\"])(node, options);\n\n    case 'functionCall':\n      return (0, _FunctionCall[\"default\"])(node, options);\n\n    case 'vector':\n      return (0, _Vector[\"default\"])(node, options);\n\n    case 'number':\n      return (0, _Number[\"default\"])(node, options);\n\n    case 'boolean':\n      return node.value ? 'true' : 'false';\n\n    case 'symbol':\n      return node.name;\n\n    case 'function':\n      return (0, _Function[\"default\"])(node, options);\n\n    case 'define':\n      return serialize(node.value, options);\n\n    default:\n      throw \"SerializationError: Unknown node type \".concat(node.type);\n  }\n}","map":{"version":3,"mappings":";;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,mBAA6C,GAAG,CAClD,QADkD,EAElD,UAFkD,EAGlD,IAHkD,EAIlD,KAJkD,EAKlD,QALkD,EAMlD,MANkD,EAOlD,SAPkD,EAQlD,cARkD,EASlD,iBATkD,EAUlD,MAVkD,EAWlD,OAXkD,EAYlD,QAZkD,EAalD,OAbkD,EAclD,SAdkD,EAelD,OAfkD,EAgBlD,cAhBkD,EAiBlD,QAjBkD,EAkBlD,QAlBkD,EAmBlD,SAnBkD,EAoBlD,QApBkD,CAAtD;;AAuBO,SAASC,aAAT,CACHC,UADG,EAEHC,SAFG,EAII;EAAA,IADPC,yBACO,uEADqB,KACrB;EACP,OAAOA,yBAAyB,GAC1BJ,mBAAmB,CAACK,OAApBL,CAA4BG,SAA5BH,KAA0CA,mBAAmB,CAACK,OAApBL,CAA4BE,UAA5BF,CADhB,GAE1BA,mBAAmB,CAACK,OAApBL,CAA4BG,SAA5BH,IAAyCA,mBAAmB,CAACK,OAApBL,CAA4BE,UAA5BF,CAF/C;AAGH;;AAEc,SAASM,SAAT,CAAmBC,IAAnB,EAAyCC,OAAzC,EAAmE;EAC9E,QAAQD,IAAI,CAACE,IAAb;IACI,KAAK,IAAL;MACI,OAAO,oBAAYF,IAAZ,EAAkBC,OAAlB,CAAP;;IAEJ,KAAK,KAAL;MACI,OAAO,qBAAaD,IAAb,EAAmBC,OAAnB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,MAAL;MACI,OAAO,sBAAcD,IAAd,EAAoBC,OAApB,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAO,yBAAiBD,IAAjB,EAAuBC,OAAvB,CAAP;;IAEJ,KAAK,cAAL;MACI,OAAO,6BAAsBD,IAAtB,EAA4BC,OAA5B,CAAP;;IAEJ,KAAK,iBAAL;MACI,OAAO,iCAAyBD,IAAzB,EAA+BC,OAA/B,CAAP;;IAEJ,KAAK,MAAL;MACI,OAAO,sBAAcD,IAAd,EAAoBC,OAApB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,uBAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,uBAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAO,yBAAiBD,IAAjB,EAAuBC,OAAvB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,uBAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,cAAL;MACI,OAAO,8BAAsBD,IAAtB,EAA4BC,OAA5B,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAOD,IAAI,CAACG,KAALH,GAAa,MAAbA,GAAsB,OAA7B;;IAEJ,KAAK,QAAL;MACI,OAAOA,IAAI,CAACI,IAAZ;;IAEJ,KAAK,UAAL;MACI,OAAO,0BAAkBJ,IAAlB,EAAwBC,OAAxB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAOF,SAAS,CAACC,IAAI,CAACG,KAAN,EAAaF,OAAb,CAAhB;;IAEJ;MACI,sDAA+CD,IAAI,CAACE,IAApD;EA9DR;AAgEH","names":["serializePrecedents","needsBrackets","parentType","childType","bracketsOnEqualPrecedence","indexOf","serialize","node","options","type","value","name"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/serialize/index.ts"],"sourcesContent":["import { SyntaxTreeNode, Options } from '../types';\nimport serializeAnd from './nodes/And';\nimport serializeDivided from './nodes/Divided';\nimport serializeEquals from './nodes/Equals';\nimport serializeFunction from './nodes/Function';\nimport serializeFunctionCall from './nodes/FunctionCall';\nimport serializeGreater from './nodes/Greater';\nimport serializeGreaterOrEquals from './nodes/GreaterOrEquals';\nimport serializeLess from './nodes/Less';\nimport serializeLessOrEquals from './nodes/LessOrEqual';\nimport serializeMinus from './nodes/Minus';\nimport serializeNegate from './nodes/Negate';\nimport serializeNumber from './nodes/Number';\nimport serializeOr from './nodes/Or';\nimport serializePlus from './nodes/Plus';\nimport serializePower from './nodes/Power';\nimport serializeTimes from './nodes/Times';\nimport serializeVector from './nodes/Vector';\n\nconst serializePrecedents: SyntaxTreeNode['type'][] = [\n    'define',\n    'function',\n    'or',\n    'and',\n    'equals',\n    'less',\n    'greater',\n    'lessOrEquals',\n    'greaterOrEquals',\n    'plus',\n    'minus',\n    'negate',\n    'times',\n    'divided',\n    'power',\n    'functionCall',\n    'vector',\n    'symbol',\n    'boolean',\n    'number',\n];\n\nexport function needsBrackets(\n    parentType: SyntaxTreeNode['type'],\n    childType: SyntaxTreeNode['type'],\n    bracketsOnEqualPrecedence = false,\n): boolean {\n    return bracketsOnEqualPrecedence\n        ? serializePrecedents.indexOf(childType) <= serializePrecedents.indexOf(parentType)\n        : serializePrecedents.indexOf(childType) < serializePrecedents.indexOf(parentType);\n}\n\nexport default function serialize(node: SyntaxTreeNode, options: Options): string {\n    switch (node.type) {\n        case 'or':\n            return serializeOr(node, options);\n\n        case 'and':\n            return serializeAnd(node, options);\n\n        case 'equals':\n            return serializeEquals(node, options);\n\n        case 'less':\n            return serializeLess(node, options);\n\n        case 'greater':\n            return serializeGreater(node, options);\n\n        case 'lessOrEquals':\n            return serializeLessOrEquals(node, options);\n\n        case 'greaterOrEquals':\n            return serializeGreaterOrEquals(node, options);\n\n        case 'plus':\n            return serializePlus(node, options);\n\n        case 'minus':\n            return serializeMinus(node, options);\n\n        case 'negate':\n            return serializeNegate(node, options);\n\n        case 'times':\n            return serializeTimes(node, options);\n\n        case 'divided':\n            return serializeDivided(node, options);\n\n        case 'power':\n            return serializePower(node, options);\n\n        case 'functionCall':\n            return serializeFunctionCall(node, options);\n\n        case 'vector':\n            return serializeVector(node, options);\n\n        case 'number':\n            return serializeNumber(node, options);\n\n        case 'boolean':\n            return node.value ? 'true' : 'false';\n\n        case 'symbol':\n            return node.name;\n\n        case 'function':\n            return serializeFunction(node, options);\n\n        case 'define':\n            return serialize(node.value, options);\n\n        default:\n            throw `SerializationError: Unknown node type ${node.type}`;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}
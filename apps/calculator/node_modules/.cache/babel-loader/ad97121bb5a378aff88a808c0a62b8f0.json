{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluateDivided;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _Divided = _interopRequireDefault(require(\"../../create/Divided\"));\n\nvar _NumberNode = _interopRequireDefault(require(\"../../create/NumberNode\"));\n\nvar _Vector = _interopRequireDefault(require(\"../../create/Vector\"));\n\nvar _composeFunctionUtils = require(\"../../utils/compose-function-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluateDivided(node, context) {\n  var leftChild = (0, _[\"default\"])(node.left, context);\n  var rightChild = (0, _[\"default\"])(node.right, context);\n\n  if (leftChild.type === 'number' && rightChild.type === 'number' && context.options.config.operators.dividedNumberNumber) {\n    if (rightChild.value === 0) {\n      throw \"ArithmeticError: division by zero is not allowed\";\n    }\n\n    return (0, _NumberNode[\"default\"])(leftChild.value / rightChild.value);\n  } else if (leftChild.type === 'function' && rightChild.type === 'function' && context.options.config.operators.dividedFunctionFunction) {\n    return (0, _composeFunctionUtils.createBinaryOperatorFunctionComposition)(leftChild, rightChild, _Divided[\"default\"], context);\n  } else if (leftChild.type === 'vector' && rightChild.type === 'number' && context.options.config.operators.dividedVectorNumber) {\n    return (0, _Vector[\"default\"])(leftChild.values.map(function (value) {\n      return (0, _[\"default\"])((0, _Divided[\"default\"])(value, rightChild), context);\n    }));\n  }\n\n  throw \"TypeError: <\".concat(leftChild.type, \"> / <\").concat(rightChild.type, \"> is not defined\");\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEe,SAASA,eAAT,CAAyBC,IAAzB,EAAwCC,OAAxC,EAA0E;EACrF,IAAMC,SAAS,GAAG,kBAASF,IAAI,CAACG,IAAd,EAAoBF,OAApB,CAAlB;EACA,IAAMG,UAAU,GAAG,kBAASJ,IAAI,CAACK,KAAd,EAAqBJ,OAArB,CAAnB;;EAEA,IACIC,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,QADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCS,mBAHrC,EAIE;IACE,IAAIN,UAAU,CAACO,KAAXP,KAAqB,CAAzB,EAA4B;MACxB;IACH;;IAED,OAAO,4BAAiBF,SAAS,CAACS,KAAVT,GAAkBE,UAAU,CAACO,KAA9C,CAAP;EATJ,OAUO,IACHT,SAAS,CAACI,IAAVJ,KAAmB,UAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,UADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCW,uBAH9B,EAIL;IACE,OAAO,mEAAwCV,SAAxC,EAAmDE,UAAnD,EAA+DS,mBAA/D,EAA8EZ,OAA9E,CAAP;EALG,OAMA,IACHC,SAAS,CAACI,IAAVJ,KAAmB,QAAnBA,IACAE,UAAU,CAACE,IAAXF,KAAoB,QADpBF,IAEAD,OAAO,CAACM,OAARN,CAAgBO,MAAhBP,CAAuBQ,SAAvBR,CAAiCa,mBAH9B,EAIL;IACE,OAAO,wBAAaZ,SAAS,CAACa,MAAVb,CAAiBc,GAAjBd,CAAqB,UAACS,KAAD;MAAA,OAAW,kBAAS,yBAAcA,KAAd,EAAqBP,UAArB,CAAT,EAA2CH,OAA3C,CAAX;IAArB,EAAb,CAAP;EACH;;EAED,4BAAqBC,SAAS,CAACI,IAA/B,kBAA2CF,UAAU,CAACE,IAAtD;AACH","names":["evaluateDivided","node","context","leftChild","left","rightChild","right","type","options","config","operators","dividedNumberNumber","value","dividedFunctionFunction","createDivided","dividedVectorNumber","values","map"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/nodes/Divided.ts"],"sourcesContent":["import evaluate from '..';\nimport createDivided from '../../create/Divided';\nimport createNumberNode from '../../create/NumberNode';\nimport createVector from '../../create/Vector';\nimport { Divided, Context, SyntaxTreeNode } from '../../types';\nimport { createBinaryOperatorFunctionComposition } from '../../utils/compose-function-utils';\n\nexport default function evaluateDivided(node: Divided, context: Context): SyntaxTreeNode {\n    const leftChild = evaluate(node.left, context);\n    const rightChild = evaluate(node.right, context);\n\n    if (\n        leftChild.type === 'number' &&\n        rightChild.type === 'number' &&\n        context.options.config.operators.dividedNumberNumber\n    ) {\n        if (rightChild.value === 0) {\n            throw `ArithmeticError: division by zero is not allowed`;\n        }\n\n        return createNumberNode(leftChild.value / rightChild.value);\n    } else if (\n        leftChild.type === 'function' &&\n        rightChild.type === 'function' &&\n        context.options.config.operators.dividedFunctionFunction\n    ) {\n        return createBinaryOperatorFunctionComposition(leftChild, rightChild, createDivided, context);\n    } else if (\n        leftChild.type === 'vector' &&\n        rightChild.type === 'number' &&\n        context.options.config.operators.dividedVectorNumber\n    ) {\n        return createVector(leftChild.values.map((value) => evaluate(createDivided(value, rightChild), context)));\n    }\n\n    throw `TypeError: <${leftChild.type}> / <${rightChild.type}> is not defined`;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _eval = _interopRequireDefault(require(\"../../eval\"));\n\nvar _Negate = _interopRequireDefault(require(\"../../create/Negate\"));\n\nvar _symbolicUtils = require(\"../../utils/symbolic-utils\");\n\nvar _normalizeUtils = require(\"./../../utils/normalize-utils\");\n\nvar _Times = _interopRequireDefault(require(\"../../create/Times\"));\n\nvar _NumberNode = _interopRequireDefault(require(\"../../create/NumberNode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar evaluateIfPossible = function evaluateIfPossible(node, context) {\n  if (!(0, _symbolicUtils.containsVariables)(node, context)) {\n    return (0, _eval[\"default\"])(node, context);\n  }\n};\n\nvar normalizeChild = function normalizeChild(node, context) {\n  if (node.type !== 'negate') {\n    return;\n  }\n\n  return (0, _Negate[\"default\"])((0, _[\"default\"])(node.value, context));\n};\n\nvar removeDoubleNegate = function removeDoubleNegate(node) {\n  if (node.type !== 'negate' || node.value.type !== 'negate') {\n    return;\n  }\n\n  return node.value.value;\n};\n\nvar replaceNegateWithTimes = function replaceNegateWithTimes(node, context) {\n  if (node.type !== 'negate') {\n    return;\n  }\n\n  return (0, _[\"default\"])((0, _Times[\"default\"])((0, _NumberNode[\"default\"])(-1), node.value), context);\n};\n\nvar normalizeNegate = (0, _normalizeUtils.combineNormalizers)([evaluateIfPossible, normalizeChild, removeDoubleNegate, replaceNegateWithTimes]);\nvar _default = normalizeNegate;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,kBAAqC,GAAG,SAAxCA,kBAAwC,CAACC,IAAD,EAAOC,OAAP,EAAmB;EAC7D,IAAI,CAAC,sCAAkBD,IAAlB,EAAwBC,OAAxB,CAAL,EAAuC;IACnC,OAAO,sBAASD,IAAT,EAAeC,OAAf,CAAP;EACH;AAHL;;AAMA,IAAMC,cAAiC,GAAG,SAApCA,cAAoC,CAACF,IAAD,EAAOC,OAAP,EAAmB;EACzD,IAAID,IAAI,CAACG,IAALH,KAAc,QAAlB,EAA4B;IACxB;EACH;;EAED,OAAO,wBAAa,kBAAUA,IAAI,CAACI,KAAf,EAAsBH,OAAtB,CAAb,CAAP;AALJ;;AAQA,IAAMI,kBAAqC,GAAG,SAAxCA,kBAAwC,CAACL,IAAD,EAAU;EACpD,IAAIA,IAAI,CAACG,IAALH,KAAc,QAAdA,IAA0BA,IAAI,CAACI,KAALJ,CAAWG,IAAXH,KAAoB,QAAlD,EAA4D;IACxD;EACH;;EAED,OAAOA,IAAI,CAACI,KAALJ,CAAWI,KAAlB;AALJ;;AAQA,IAAME,sBAAyC,GAAG,SAA5CA,sBAA4C,CAACN,IAAD,EAAOC,OAAP,EAAmB;EACjE,IAAID,IAAI,CAACG,IAALH,KAAc,QAAlB,EAA4B;IACxB;EACH;;EAED,OAAO,kBAAU,uBAAY,4BAAiB,CAAC,CAAlB,CAAZ,EAAkCA,IAAI,CAACI,KAAvC,CAAV,EAAyDH,OAAzD,CAAP;AALJ;;AAQA,IAAMM,eAAe,GAAG,wCAAmB,CACvCR,kBADuC,EAEvCG,cAFuC,EAGvCG,kBAHuC,EAIvCC,sBAJuC,CAAnB,CAAxB;eAOeC","names":["evaluateIfPossible","node","context","normalizeChild","type","value","removeDoubleNegate","replaceNegateWithTimes","normalizeNegate"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/normalize/nodes/normalize-negate.ts"],"sourcesContent":["import normalize from '..';\nimport evaluate from '../../eval';\nimport createNegate from '../../create/Negate';\nimport { containsVariables } from '../../utils/symbolic-utils';\nimport { combineNormalizers, PartialNormalizer } from './../../utils/normalize-utils';\nimport createTimes from '../../create/Times';\nimport createNumberNode from '../../create/NumberNode';\n\nconst evaluateIfPossible: PartialNormalizer = (node, context) => {\n    if (!containsVariables(node, context)) {\n        return evaluate(node, context);\n    }\n};\n\nconst normalizeChild: PartialNormalizer = (node, context) => {\n    if (node.type !== 'negate') {\n        return;\n    }\n\n    return createNegate(normalize(node.value, context));\n};\n\nconst removeDoubleNegate: PartialNormalizer = (node) => {\n    if (node.type !== 'negate' || node.value.type !== 'negate') {\n        return;\n    }\n\n    return node.value.value;\n};\n\nconst replaceNegateWithTimes: PartialNormalizer = (node, context) => {\n    if (node.type !== 'negate') {\n        return;\n    }\n\n    return normalize(createTimes(createNumberNode(-1), node.value), context);\n};\n\nconst normalizeNegate = combineNormalizers([\n    evaluateIfPossible,\n    normalizeChild,\n    removeDoubleNegate,\n    replaceNegateWithTimes,\n]);\n\nexport default normalizeNegate;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _NumberNode = _interopRequireDefault(require(\"../../../create/NumberNode\"));\n\nvar _parameterUtils = require(\"../../../utils/parameter-utils\");\n\nvar _pluginBuilder = require(\"../../../utils/plugin-builder\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar expPlugin = (0, _pluginBuilder.createPlugin)('exp');\n(0, _pluginBuilder.addPluginAuthor)(expPlugin, 'core');\n(0, _pluginBuilder.addPluginDescription)(expPlugin, 'adds e, exp, log, lg');\nvar expHeader = [{\n  name: 'x',\n  type: 'number',\n  evaluate: true\n}];\nvar logHeader = [{\n  name: 'x',\n  type: 'number',\n  evaluate: true\n}, {\n  name: 'base',\n  type: 'number',\n  evaluate: true\n}];\n(0, _pluginBuilder.addPluginConstant)(expPlugin, {\n  name: 'e',\n  value: (0, _NumberNode[\"default\"])(Math.E),\n  documentation: {\n    en: {\n      synopsis: 'e',\n      description: \"Euler's number\"\n    },\n    de: {\n      synopsis: 'e',\n      description: 'Eulers Zahl'\n    }\n  }\n});\n(0, _pluginBuilder.addPluginFunction)(expPlugin, (0, _pluginBuilder.createPluginFunction)('exp', expHeader, 'Equivalent to e^x.', 'Äquivalent zu e^x', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('exp', parameters, expHeader, context);\n  var x = parameterStackFrame['x'].value;\n  return (0, _NumberNode[\"default\"])(Math.exp(x));\n}));\n(0, _pluginBuilder.addPluginFunction)(expPlugin, (0, _pluginBuilder.createPluginFunction)('lg', expHeader, 'Logarithm of x to base 10.', 'Berechnet den Logarithmus von x zur Basis 10', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('lg', parameters, expHeader, context);\n  var x = parameterStackFrame['x'].value;\n\n  if (x <= 0) {\n    throw 'RuntimeError: lg: undefined';\n  }\n\n  return (0, _NumberNode[\"default\"])(Math.log10(x));\n}));\n(0, _pluginBuilder.addPluginFunction)(expPlugin, (0, _pluginBuilder.createPluginFunction)('ln', expHeader, 'Logarithm of x to base e.', 'Berechnet den Logarithmus von x zur Basis e.', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('ln', parameters, expHeader, context);\n  var x = parameterStackFrame['x'].value;\n\n  if (x <= 0) {\n    throw 'RuntimeError: lg: undefined';\n  }\n\n  return (0, _NumberNode[\"default\"])(Math.log(x));\n}));\n(0, _pluginBuilder.addPluginFunction)(expPlugin, (0, _pluginBuilder.createPluginFunction)('log', logHeader, 'Logarithm of x to the given base.', 'Berechnet den Logarithmus von x zur Basis base', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('log', parameters, logHeader, context);\n  var x = parameterStackFrame['x'].value;\n  var b = parameterStackFrame['base'].value;\n\n  if (x <= 0 || b <= 0) {\n    throw 'RuntimeError: log: undefined';\n  }\n\n  return (0, _NumberNode[\"default\"])(Math.log(x) / Math.log(b));\n}));\nvar _default = expPlugin;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["expPlugin","expHeader","name","type","evaluate","logHeader","value","Math","E","documentation","en","synopsis","description","de","parameters","context","parameterStackFrame","x","exp","log10","log","b"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/exp/exp.ts"],"sourcesContent":["import createNumberNode from '../../../create/NumberNode';\nimport { FunctionHeaderItem, NumberNode } from '../../../types/SyntaxTreeNodes';\nimport { mapParametersToStackFrame } from '../../../utils/parameter-utils';\nimport {\n    addPluginAuthor,\n    addPluginConstant,\n    addPluginDescription,\n    addPluginFunction,\n    createPlugin,\n    createPluginFunction,\n} from '../../../utils/plugin-builder';\n\nconst expPlugin = createPlugin('exp');\naddPluginAuthor(expPlugin, 'core');\naddPluginDescription(expPlugin, 'adds e, exp, log, lg');\n\nconst expHeader: FunctionHeaderItem[] = [{ name: 'x', type: 'number', evaluate: true }];\nconst logHeader: FunctionHeaderItem[] = [\n    { name: 'x', type: 'number', evaluate: true },\n    { name: 'base', type: 'number', evaluate: true },\n];\n\naddPluginConstant(expPlugin, {\n    name: 'e',\n    value: createNumberNode(Math.E),\n    documentation: {\n        en: {\n            synopsis: 'e',\n            description: \"Euler's number\",\n        },\n        de: {\n            synopsis: 'e',\n            description: 'Eulers Zahl',\n        },\n    },\n});\n\naddPluginFunction(\n    expPlugin,\n    createPluginFunction('exp', expHeader, 'Equivalent to e^x.', 'Äquivalent zu e^x', (parameters, context) => {\n        const parameterStackFrame = mapParametersToStackFrame('exp', parameters, expHeader, context);\n        const x = (<NumberNode>parameterStackFrame['x']).value;\n        return createNumberNode(Math.exp(x));\n    }),\n);\n\naddPluginFunction(\n    expPlugin,\n    createPluginFunction(\n        'lg',\n        expHeader,\n        'Logarithm of x to base 10.',\n        'Berechnet den Logarithmus von x zur Basis 10',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('lg', parameters, expHeader, context);\n            const x = (<NumberNode>parameterStackFrame['x']).value;\n            if (x <= 0) {\n                throw 'RuntimeError: lg: undefined';\n            }\n            return createNumberNode(Math.log10(x));\n        },\n    ),\n);\n\naddPluginFunction(\n    expPlugin,\n    createPluginFunction(\n        'ln',\n        expHeader,\n        'Logarithm of x to base e.',\n        'Berechnet den Logarithmus von x zur Basis e.',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('ln', parameters, expHeader, context);\n            const x = (<NumberNode>parameterStackFrame['x']).value;\n            if (x <= 0) {\n                throw 'RuntimeError: lg: undefined';\n            }\n            return createNumberNode(Math.log(x));\n        },\n    ),\n);\n\naddPluginFunction(\n    expPlugin,\n    createPluginFunction(\n        'log',\n        logHeader,\n        'Logarithm of x to the given base.',\n        'Berechnet den Logarithmus von x zur Basis base',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('log', parameters, logHeader, context);\n            const x = (<NumberNode>parameterStackFrame['x']).value;\n            const b = (<NumberNode>parameterStackFrame['base']).value;\n\n            if (x <= 0 || b <= 0) {\n                throw 'RuntimeError: log: undefined';\n            }\n\n            return createNumberNode(Math.log(x) / Math.log(b));\n        },\n    ),\n);\n\nexport default expPlugin;\n"]},"metadata":{},"sourceType":"script"}
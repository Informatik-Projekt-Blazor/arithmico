{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _NumberNode = _interopRequireDefault(require(\"../../../create/NumberNode\"));\n\nvar _parameterUtils = require(\"../../../utils/parameter-utils\");\n\nvar _pluginBuilder = require(\"../../../utils/plugin-builder\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar absPlugin = (0, _pluginBuilder.createPlugin)('abs');\n(0, _pluginBuilder.addPluginAuthor)(absPlugin, 'core');\n(0, _pluginBuilder.addPluginDescription)(absPlugin, 'adds abs and length functions');\nvar absHeader = [{\n  name: 'v',\n  type: 'number',\n  evaluate: true\n}];\nvar lengthHeader = [{\n  name: 'v',\n  type: 'vector',\n  evaluate: true\n}];\n(0, _pluginBuilder.addPluginFunction)(absPlugin, (0, _pluginBuilder.createPluginFunction)('abs', absHeader, 'Computes the absolute value of a number', 'Berechnet den absoluten Wert einer Zahl.', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('abs', parameters, absHeader, context);\n  var value = parameterStackFrame['v'].value;\n  return (0, _NumberNode[\"default\"])(Math.abs(value));\n}));\n(0, _pluginBuilder.addPluginFunction)(absPlugin, (0, _pluginBuilder.createPluginFunction)('length', lengthHeader, 'Computes the length of a vector', 'Berechnet die Länge eines Vektors', function (parameters, context) {\n  var parameterStackFrame = (0, _parameterUtils.mapParametersToStackFrame)('length', parameters, lengthHeader, context);\n  var values = parameterStackFrame['v'].values.map(function (value) {\n    if (value.type !== 'number') {\n      throw \"TypeError: length: expected number got \".concat(value.type);\n    }\n\n    return Math.pow(value.value, 2);\n  });\n  return (0, _NumberNode[\"default\"])(Math.sqrt(values.reduce(function (a, b) {\n    return a + b;\n  })));\n}));\nvar _default = absPlugin;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;AAQA,IAAMA,SAAS,GAAG,iCAAa,KAAb,CAAlB;AACA,oCAAgBA,SAAhB,EAA2B,MAA3B;AACA,yCAAqBA,SAArB,EAAgC,+BAAhC;AAEA,IAAMC,SAA+B,GAAG,CAAC;EAAEC,IAAI,EAAE,GAAR;EAAaC,IAAI,EAAE,QAAnB;EAA6BC,QAAQ,EAAE;AAAvC,CAAD,CAAxC;AACA,IAAMC,YAAkC,GAAG,CAAC;EAAEH,IAAI,EAAE,GAAR;EAAaC,IAAI,EAAE,QAAnB;EAA6BC,QAAQ,EAAE;AAAvC,CAAD,CAA3C;AAEA,sCACIJ,SADJ,EAEI,yCACI,KADJ,EAEIC,SAFJ,EAGI,yCAHJ,EAII,0CAJJ,EAKI,UAACK,UAAD,EAAaC,OAAb,EAAyB;EACrB,IAAMC,mBAAmB,GAAG,+CAA0B,KAA1B,EAAiCF,UAAjC,EAA6CL,SAA7C,EAAwDM,OAAxD,CAA5B;EACA,IAAME,KAAK,GAAgBD,mBAAmB,CAAC,GAAD,CAAnBA,CAA0BC,KAArD;EACA,OAAO,4BAAiBC,IAAI,CAACC,GAALD,CAASD,KAATC,CAAjB,CAAP;AARR,EAFJ;AAeA,sCACIV,SADJ,EAEI,yCACI,QADJ,EAEIK,YAFJ,EAGI,iCAHJ,EAII,mCAJJ,EAKI,UAACC,UAAD,EAAaC,OAAb,EAAyB;EACrB,IAAMC,mBAAmB,GAAG,+CAA0B,QAA1B,EAAoCF,UAApC,EAAgDD,YAAhD,EAA8DE,OAA9D,CAA5B;EACA,IAAMK,MAAM,GAAYJ,mBAAmB,CAAC,GAAD,CAAnBA,CAA0BI,MAA1BJ,CAAiCK,GAAjCL,CAAqC,UAACC,KAAD,EAAW;IACpE,IAAIA,KAAK,CAACN,IAANM,KAAe,QAAnB,EAA6B;MACzB,uDAAgDA,KAAK,CAACN,IAAtD;IACH;;IAED,OAAOO,IAAI,CAACI,GAALJ,CAASD,KAAK,CAACA,KAAfC,EAAsB,CAAtBA,CAAP;EALW,CAASF,CAAxB;EAQA,OAAO,4BAAiBE,IAAI,CAACK,IAALL,CAAUE,MAAM,CAACI,MAAPJ,CAAc,UAACK,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAd,EAAVR,CAAjB,CAAP;AAfR,EAFJ;eAsBeV","names":["absPlugin","absHeader","name","type","evaluate","lengthHeader","parameters","context","parameterStackFrame","value","Math","abs","values","map","pow","sqrt","reduce","a","b"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/abs/abs.ts"],"sourcesContent":["import createNumberNode from '../../../create/NumberNode';\nimport { FunctionHeaderItem, NumberNode, Vector } from '../../../types/SyntaxTreeNodes';\nimport { mapParametersToStackFrame } from '../../../utils/parameter-utils';\nimport {\n    addPluginAuthor,\n    addPluginDescription,\n    addPluginFunction,\n    createPlugin,\n    createPluginFunction,\n} from '../../../utils/plugin-builder';\n\nconst absPlugin = createPlugin('abs');\naddPluginAuthor(absPlugin, 'core');\naddPluginDescription(absPlugin, 'adds abs and length functions');\n\nconst absHeader: FunctionHeaderItem[] = [{ name: 'v', type: 'number', evaluate: true }];\nconst lengthHeader: FunctionHeaderItem[] = [{ name: 'v', type: 'vector', evaluate: true }];\n\naddPluginFunction(\n    absPlugin,\n    createPluginFunction(\n        'abs',\n        absHeader,\n        'Computes the absolute value of a number',\n        'Berechnet den absoluten Wert einer Zahl.',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('abs', parameters, absHeader, context);\n            const value = (<NumberNode>parameterStackFrame['v']).value;\n            return createNumberNode(Math.abs(value));\n        },\n    ),\n);\n\naddPluginFunction(\n    absPlugin,\n    createPluginFunction(\n        'length',\n        lengthHeader,\n        'Computes the length of a vector',\n        'Berechnet die Länge eines Vektors',\n        (parameters, context) => {\n            const parameterStackFrame = mapParametersToStackFrame('length', parameters, lengthHeader, context);\n            const values = (<Vector>parameterStackFrame['v']).values.map((value) => {\n                if (value.type !== 'number') {\n                    throw `TypeError: length: expected number got ${value.type}`;\n                }\n\n                return Math.pow(value.value, 2);\n            });\n\n            return createNumberNode(Math.sqrt(values.reduce((a, b) => a + b)));\n        },\n    ),\n);\n\nexport default absPlugin;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _NumberNode = _interopRequireDefault(require(\"../../../create/NumberNode\"));\n\nvar _pluginBuilder = require(\"../../../utils/plugin-builder\");\n\nvar _floatUtils = require(\"../../../utils/float-utils\");\n\nvar _parameterUtils = require(\"../../../utils/parameter-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar trigonometryPlugin = (0, _pluginBuilder.createPlugin)('core/trigonometry');\n(0, _pluginBuilder.addPluginAuthor)(trigonometryPlugin, 'core');\n(0, _pluginBuilder.addPluginDescription)(trigonometryPlugin, 'adds trigonometry functions and constants');\n(0, _pluginBuilder.addPluginConstant)(trigonometryPlugin, {\n  name: 'pi',\n  value: (0, _NumberNode[\"default\"])(Math.PI),\n  documentation: {\n    en: {\n      synopsis: 'pi',\n      description: \"Ï€ is commonly defined as the ratio of a circle's circumference C to its diameter d\"\n    },\n    de: {\n      synopsis: 'pi',\n      description: 'Kreiszahl Ï€'\n    }\n  }\n});\n\nfunction addTrigonometryFunction(name, func, enName, deName) {\n  var header = [{\n    type: 'number',\n    name: 'x',\n    evaluate: true\n  }];\n  (0, _pluginBuilder.addPluginFunction)(trigonometryPlugin, (0, _pluginBuilder.createPluginFunction)(name, header, \"calculates the \".concat(enName, \" of x\"), \"berechnet den \".concat(deName, \" von x\"), function (parameters, context) {\n    var stackFrame = (0, _parameterUtils.mapParametersToStackFrame)(name, parameters, header, context);\n    var value = func(stackFrame.x.value, context.options.angleUnit);\n\n    if ((0, _floatUtils.closeTo)(value, 0)) {\n      return (0, _NumberNode[\"default\"])(0);\n    }\n\n    if ((0, _floatUtils.closeTo)(value, 1e15) || !Number.isFinite(value)) {\n      throw \"RuntimeError: \".concat(name, \": undefined\");\n    }\n\n    return (0, _NumberNode[\"default\"])(value);\n  }));\n}\n\nfunction convertRadiansToDegree(radians) {\n  return 180 * radians / Math.PI;\n}\n\nfunction convertDegreesToRadians(degrees) {\n  return Math.PI * degrees / 180;\n}\n\nfunction resolveAngleUnitInput(f) {\n  return function (v, angleUnit) {\n    return angleUnit === 'degrees' ? f(convertDegreesToRadians(v)) : f(v);\n  };\n}\n\nfunction resolveAngleUnitOutput(f) {\n  return function (v, angleUnit) {\n    return angleUnit === 'degrees' ? convertRadiansToDegree(f(v)) : f(v);\n  };\n}\n\naddTrigonometryFunction('sin', resolveAngleUnitInput(Math.sin), 'sine', 'Sinus');\naddTrigonometryFunction('cos', resolveAngleUnitInput(Math.cos), 'cosine', 'Cosinus');\naddTrigonometryFunction('tan', resolveAngleUnitInput(Math.tan), 'tangent', 'Tangens');\naddTrigonometryFunction('asin', resolveAngleUnitOutput(Math.asin), 'arcsine', 'Arkussinus');\naddTrigonometryFunction('acos', resolveAngleUnitOutput(Math.acos), 'arc cosine', 'Arkuscosinus');\naddTrigonometryFunction('atan', resolveAngleUnitOutput(Math.atan), 'arctangent', 'Arkustangens');\naddTrigonometryFunction('sinh', Math.sinh, 'hyperbolic sine', 'Sinus hyperbolicus');\naddTrigonometryFunction('cosh', Math.cosh, 'hyperbolic cosine', 'Cosinus hyperbolics');\naddTrigonometryFunction('tanh', Math.tanh, 'hyperbolic tangent', 'Tanges hyperbolics');\naddTrigonometryFunction('asinh', Math.asinh, 'inverse hyperbolic sine', 'Areasinus hyperbolicus');\naddTrigonometryFunction('acosh', Math.acosh, 'inverse hyperbolic cosine', 'Areacosinus hyperbolicus');\naddTrigonometryFunction('atanh', Math.atanh, 'inverse hyperbolic tangent', 'Areatangens hyperbolicus');\nvar _default = trigonometryPlugin;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":"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","names":["trigonometryPlugin","name","value","Math","PI","documentation","en","synopsis","description","de","addTrigonometryFunction","func","enName","deName","header","type","evaluate","parameters","context","stackFrame","x","options","angleUnit","Number","isFinite","convertRadiansToDegree","radians","convertDegreesToRadians","degrees","resolveAngleUnitInput","f","v","resolveAngleUnitOutput","sin","cos","tan","asin","acos","atan","sinh","cosh","tanh","asinh","acosh","atanh"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/trigonometry/trigonometry.ts"],"sourcesContent":["import { Options } from './../../../types/Context';\nimport { NumberNode, FunctionHeaderItem } from '../../../types/SyntaxTreeNodes';\nimport { SyntaxTreeNode, Context } from '../../../types';\nimport createNumberNode from '../../../create/NumberNode';\nimport {\n    addPluginAuthor,\n    addPluginConstant,\n    addPluginDescription,\n    addPluginFunction,\n    createPlugin,\n    createPluginFunction,\n} from '../../../utils/plugin-builder';\nimport { closeTo } from '../../../utils/float-utils';\nimport { mapParametersToStackFrame } from '../../../utils/parameter-utils';\n\nconst trigonometryPlugin = createPlugin('core/trigonometry');\n\naddPluginAuthor(trigonometryPlugin, 'core');\naddPluginDescription(trigonometryPlugin, 'adds trigonometry functions and constants');\n\naddPluginConstant(trigonometryPlugin, {\n    name: 'pi',\n    value: createNumberNode(Math.PI),\n    documentation: {\n        en: {\n            synopsis: 'pi',\n            description: \"Ï€ is commonly defined as the ratio of a circle's circumference C to its diameter d\",\n        },\n        de: {\n            synopsis: 'pi',\n            description: 'Kreiszahl Ï€',\n        },\n    },\n});\n\ntype TrigonometryEvaluator = (v: number, angleUnit: Options['angleUnit']) => number;\n\nfunction addTrigonometryFunction(name: string, func: TrigonometryEvaluator, enName: string, deName: string) {\n    const header: FunctionHeaderItem[] = [{ type: 'number', name: 'x', evaluate: true }];\n\n    addPluginFunction(\n        trigonometryPlugin,\n        createPluginFunction(\n            name,\n            header,\n            `calculates the ${enName} of x`,\n            `berechnet den ${deName} von x`,\n            (parameters: SyntaxTreeNode[], context: Context): SyntaxTreeNode => {\n                const stackFrame = mapParametersToStackFrame(name, parameters, header, context);\n                const value = func((stackFrame.x as NumberNode).value, context.options.angleUnit);\n\n                if (closeTo(value, 0)) {\n                    return createNumberNode(0);\n                }\n\n                if (closeTo(value, 1e15) || !Number.isFinite(value)) {\n                    throw `RuntimeError: ${name}: undefined`;\n                }\n\n                return createNumberNode(value);\n            },\n        ),\n    );\n}\n\nfunction convertRadiansToDegree(radians: number) {\n    return (180 * radians) / Math.PI;\n}\n\nfunction convertDegreesToRadians(degrees: number) {\n    return (Math.PI * degrees) / 180;\n}\n\nfunction resolveAngleUnitInput(f: (x: number) => number): TrigonometryEvaluator {\n    return (v, angleUnit) => {\n        return angleUnit === 'degrees' ? f(convertDegreesToRadians(v)) : f(v);\n    };\n}\n\nfunction resolveAngleUnitOutput(f: (x: number) => number): TrigonometryEvaluator {\n    return (v, angleUnit) => {\n        return angleUnit === 'degrees' ? convertRadiansToDegree(f(v)) : f(v);\n    };\n}\n\naddTrigonometryFunction('sin', resolveAngleUnitInput(Math.sin), 'sine', 'Sinus');\naddTrigonometryFunction('cos', resolveAngleUnitInput(Math.cos), 'cosine', 'Cosinus');\naddTrigonometryFunction('tan', resolveAngleUnitInput(Math.tan), 'tangent', 'Tangens');\naddTrigonometryFunction('asin', resolveAngleUnitOutput(Math.asin), 'arcsine', 'Arkussinus');\naddTrigonometryFunction('acos', resolveAngleUnitOutput(Math.acos), 'arc cosine', 'Arkuscosinus');\naddTrigonometryFunction('atan', resolveAngleUnitOutput(Math.atan), 'arctangent', 'Arkustangens');\n\naddTrigonometryFunction('sinh', Math.sinh, 'hyperbolic sine', 'Sinus hyperbolicus');\naddTrigonometryFunction('cosh', Math.cosh, 'hyperbolic cosine', 'Cosinus hyperbolics');\naddTrigonometryFunction('tanh', Math.tanh, 'hyperbolic tangent', 'Tanges hyperbolics');\naddTrigonometryFunction('asinh', Math.asinh, 'inverse hyperbolic sine', 'Areasinus hyperbolicus');\naddTrigonometryFunction('acosh', Math.acosh, 'inverse hyperbolic cosine', 'Areacosinus hyperbolicus');\naddTrigonometryFunction('atanh', Math.atanh, 'inverse hyperbolic tangent', 'Areatangens hyperbolicus');\n\nexport default trigonometryPlugin;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSubmatrix = getSubmatrix;\nexports.replaceColumn = replaceColumn;\n\nfunction getSubmatrix(matrix, excludedRowIndex, excludedColumnIndex) {\n  return matrix.filter(function (_, rowIndex) {\n    return rowIndex !== excludedRowIndex;\n  }).map(function (row) {\n    return row.filter(function (_, columnIndex) {\n      return columnIndex !== excludedColumnIndex;\n    });\n  });\n}\n\nfunction replaceColumn(matrix, column, index) {\n  return matrix.map(function (row, rowIndex) {\n    return row.map(function (item, columnIndex) {\n      return columnIndex === index ? column[rowIndex] : item;\n    });\n  });\n}","map":{"version":3,"mappings":";;;;;;;;AAAO,SAASA,YAAT,CAAsBC,MAAtB,EAA0CC,gBAA1C,EAAoEC,mBAApE,EAAiG;EACpG,OAAOF,MAAM,CACRG,MADEH,CACK,UAACI,CAAD,EAAIC,QAAJ;IAAA,OAAiBA,QAAQ,KAAKJ,gBAA9B;EADL,GAEFK,GAFEN,CAEE,UAACO,GAAD;IAAA,OAASA,GAAG,CAACJ,MAAJI,CAAW,UAACH,CAAD,EAAII,WAAJ;MAAA,OAAoBA,WAAW,KAAKN,mBAApC;IAAX,EAAT;EAFF,EAAP;AAGH;;AAEM,SAASO,aAAT,CAAuBT,MAAvB,EAA2CU,MAA3C,EAA6DC,KAA7D,EAAwF;EAC3F,OAAOX,MAAM,CAACM,GAAPN,CAAW,UAACO,GAAD,EAAMF,QAAN;IAAA,OACdE,GAAG,CAACD,GAAJC,CAAQ,UAACK,IAAD,EAAOJ,WAAP;MAAA,OAAwBA,WAAW,KAAKG,KAAhBH,GAAwBE,MAAM,CAACL,QAAD,CAA9BG,GAA2CI,IAAnE;IAAR,EADc;EAAX,EAAP;AAGH","names":["getSubmatrix","matrix","excludedRowIndex","excludedColumnIndex","filter","_","rowIndex","map","row","columnIndex","replaceColumn","column","index","item"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/lsolve/utils/matrix-utils.ts"],"sourcesContent":["export function getSubmatrix(matrix: number[][], excludedRowIndex: number, excludedColumnIndex: number) {\n    return matrix\n        .filter((_, rowIndex) => rowIndex !== excludedRowIndex)\n        .map((row) => row.filter((_, columnIndex) => columnIndex !== excludedColumnIndex));\n}\n\nexport function replaceColumn(matrix: number[][], column: number[], index: number): number[][] {\n    return matrix.map((row, rowIndex) =>\n        row.map((item, columnIndex) => (columnIndex === index ? column[rowIndex] : item)),\n    );\n}\n"]},"metadata":{},"sourceType":"script"}
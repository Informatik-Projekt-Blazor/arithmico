{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = scan;\n\nvar _eval = _interopRequireDefault(require(\"../../../../eval\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar SCAN_COUNT = 1000;\n\nfunction scan(expression, leftLimit, rightLimit, value, context) {\n  var results = [];\n\n  for (var i = 0; i < SCAN_COUNT + 3; i++) {\n    var x = leftLimit + (rightLimit - leftLimit) / SCAN_COUNT * (i - 1);\n    value.value = x;\n\n    try {\n      var result = (0, _eval[\"default\"])(expression, context);\n\n      if (result.type === 'number') {\n        results.push([x, Math.abs(result.value)]);\n      } // eslint-disable-next-line no-empty\n\n    } catch (_e) {}\n  }\n\n  return results;\n}","map":{"version":3,"mappings":";;;;;;;AACA;;;;;;;;AAIA,IAAMA,UAAU,GAAG,IAAnB;;AAEe,SAASC,IAAT,CACXC,UADW,EAEXC,SAFW,EAGXC,UAHW,EAIXC,KAJW,EAKXC,OALW,EAMJ;EACP,IAAMC,OAAgB,GAAG,EAAzB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,UAAU,GAAG,CAAjC,EAAoCQ,CAAC,EAArC,EAAyC;IACrC,IAAMC,CAAC,GAAGN,SAAS,GAAI,CAACC,UAAU,GAAGD,SAAd,IAA2BH,UAA3B,IAA0CQ,CAAC,GAAG,CAA9C,CAAvB;IACAH,KAAK,CAACA,KAANA,GAAcI,CAAdJ;;IACA,IAAI;MACA,IAAMK,MAAM,GAAG,sBAASR,UAAT,EAAqBI,OAArB,CAAf;;MACA,IAAII,MAAM,CAACC,IAAPD,KAAgB,QAApB,EAA8B;QAC1BH,OAAO,CAACK,IAARL,CAAa,CAACE,CAAD,EAAII,IAAI,CAACC,GAALD,CAASH,MAAM,CAACL,KAAhBQ,CAAJ,CAAbN;MAHJ,EAKA;;IALJ,EAME,OAAOQ,EAAP,EAAW,CAAE;EAClB;;EAED,OAAOR,OAAP;AACH","names":["SCAN_COUNT","scan","expression","leftLimit","rightLimit","value","context","results","i","x","result","type","push","Math","abs","_e"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/plugins/core/nsolve/utils/scan.ts"],"sourcesContent":["import { NumberNode } from './../../../../types/SyntaxTreeNodes';\nimport evaluate from '../../../../eval';\nimport { Context, SyntaxTreeNode } from '../../../../types';\nimport { Point } from '../types';\n\nconst SCAN_COUNT = 1000;\n\nexport default function scan(\n    expression: SyntaxTreeNode,\n    leftLimit: number,\n    rightLimit: number,\n    value: NumberNode,\n    context: Context,\n): Point[] {\n    const results: Point[] = [];\n\n    for (let i = 0; i < SCAN_COUNT + 3; i++) {\n        const x = leftLimit + ((rightLimit - leftLimit) / SCAN_COUNT) * (i - 1);\n        value.value = x;\n        try {\n            const result = evaluate(expression, context);\n            if (result.type === 'number') {\n                results.push([x, Math.abs(result.value)]);\n            }\n            // eslint-disable-next-line no-empty\n        } catch (_e) {}\n    }\n\n    return results;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _ = _interopRequireDefault(require(\"..\"));\n\nvar _NumberNode = _interopRequireDefault(require(\"../../create/NumberNode\"));\n\nvar _Power = _interopRequireDefault(require(\"../../create/Power\"));\n\nvar _eval = _interopRequireDefault(require(\"../../eval\"));\n\nvar _normalizeUtils = require(\"../../utils/normalize-utils\");\n\nvar _symbolicUtils = require(\"../../utils/symbolic-utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar evaluateIfPossible = function evaluateIfPossible(node, context) {\n  if (!(0, _symbolicUtils.containsVariables)(node, context)) {\n    return (0, _eval[\"default\"])(node, context);\n  }\n};\n\nvar normalizeChildren = function normalizeChildren(node, context) {\n  if (node.type !== 'power') {\n    return;\n  }\n\n  return (0, _Power[\"default\"])((0, _[\"default\"])(node.left, context), (0, _[\"default\"])(node.right, context));\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nvar removeOneExponent = function removeOneExponent(node, _context) {\n  if (node.type !== 'power' || node.right.type !== 'number' || node.right.value !== 1) {\n    return;\n  }\n\n  return node.left;\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nvar removeZeroExponent = function removeZeroExponent(node, _context) {\n  if (node.type !== 'power' || node.right.type !== 'number' || node.right.value !== 0) {\n    return;\n  }\n\n  return (0, _NumberNode[\"default\"])(1);\n};\n\nvar normalizePower = (0, _normalizeUtils.combineNormalizers)([evaluateIfPossible, normalizeChildren, removeOneExponent, removeZeroExponent]);\nvar _default = normalizePower;\nexports[\"default\"] = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,kBAAqC,GAAG,SAAxCA,kBAAwC,CAACC,IAAD,EAAOC,OAAP,EAAmB;EAC7D,IAAI,CAAC,sCAAkBD,IAAlB,EAAwBC,OAAxB,CAAL,EAAuC;IACnC,OAAO,sBAASD,IAAT,EAAeC,OAAf,CAAP;EACH;AAHL;;AAMA,IAAMC,iBAAoC,GAAG,SAAvCA,iBAAuC,CAACF,IAAD,EAAOC,OAAP,EAAmB;EAC5D,IAAID,IAAI,CAACG,IAALH,KAAc,OAAlB,EAA2B;IACvB;EACH;;EAED,OAAO,uBAAY,kBAAUA,IAAI,CAACI,IAAf,EAAqBH,OAArB,CAAZ,EAA2C,kBAAUD,IAAI,CAACK,KAAf,EAAsBJ,OAAtB,CAA3C,CAAP;AALJ,E,CAQA;;;AACA,IAAMK,iBAAoC,GAAG,SAAvCA,iBAAuC,CAACN,IAAD,EAAOO,QAAP,EAAoB;EAC7D,IAAIP,IAAI,CAACG,IAALH,KAAc,OAAdA,IAAyBA,IAAI,CAACK,KAALL,CAAWG,IAAXH,KAAoB,QAA7CA,IAAyDA,IAAI,CAACK,KAALL,CAAWQ,KAAXR,KAAqB,CAAlF,EAAqF;IACjF;EACH;;EAED,OAAOA,IAAI,CAACI,IAAZ;AALJ,E,CAQA;;;AACA,IAAMK,kBAAqC,GAAG,SAAxCA,kBAAwC,CAACT,IAAD,EAAOO,QAAP,EAAoB;EAC9D,IAAIP,IAAI,CAACG,IAALH,KAAc,OAAdA,IAAyBA,IAAI,CAACK,KAALL,CAAWG,IAAXH,KAAoB,QAA7CA,IAAyDA,IAAI,CAACK,KAALL,CAAWQ,KAAXR,KAAqB,CAAlF,EAAqF;IACjF;EACH;;EAED,OAAO,4BAAiB,CAAjB,CAAP;AALJ;;AAQA,IAAMU,cAAc,GAAG,wCAAmB,CACtCX,kBADsC,EAEtCG,iBAFsC,EAGtCI,iBAHsC,EAItCG,kBAJsC,CAAnB,CAAvB;eAOeC","names":["evaluateIfPossible","node","context","normalizeChildren","type","left","right","removeOneExponent","_context","value","removeZeroExponent","normalizePower"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/normalize/nodes/normalize-power.ts"],"sourcesContent":["import normalize from '..';\nimport createNumberNode from '../../create/NumberNode';\nimport createPower from '../../create/Power';\nimport evaluate from '../../eval';\nimport { combineNormalizers, PartialNormalizer } from '../../utils/normalize-utils';\nimport { containsVariables } from '../../utils/symbolic-utils';\n\nconst evaluateIfPossible: PartialNormalizer = (node, context) => {\n    if (!containsVariables(node, context)) {\n        return evaluate(node, context);\n    }\n};\n\nconst normalizeChildren: PartialNormalizer = (node, context) => {\n    if (node.type !== 'power') {\n        return;\n    }\n\n    return createPower(normalize(node.left, context), normalize(node.right, context));\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst removeOneExponent: PartialNormalizer = (node, _context) => {\n    if (node.type !== 'power' || node.right.type !== 'number' || node.right.value !== 1) {\n        return;\n    }\n\n    return node.left;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst removeZeroExponent: PartialNormalizer = (node, _context) => {\n    if (node.type !== 'power' || node.right.type !== 'number' || node.right.value !== 0) {\n        return;\n    }\n\n    return createNumberNode(1);\n};\n\nconst normalizePower = combineNormalizers([\n    evaluateIfPossible,\n    normalizeChildren,\n    removeOneExponent,\n    removeZeroExponent,\n]);\n\nexport default normalizePower;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.combineNormalizers = combineNormalizers;\n\nfunction combineNormalizers(normalizers) {\n  return function (node, context) {\n    return normalizers.reduce(function (currentNode, normalizer) {\n      var normalizedNode = normalizer(currentNode, context);\n      return normalizedNode ? normalizedNode : currentNode;\n    }, node);\n  };\n}","map":{"version":3,"mappings":";;;;;;;AAKO,SAASA,kBAAT,CAA4BC,WAA5B,EAA0E;EAC7E,OAAO,UAACC,IAAD,EAAuBC,OAAvB;IAAA,OACHF,WAAW,CAACG,MAAZH,CAAmB,UAACI,WAAD,EAAcC,UAAd,EAA6B;MAC5C,IAAMC,cAAc,GAAGD,UAAU,CAACD,WAAD,EAAcF,OAAd,CAAjC;MACA,OAAOI,cAAc,GAAGA,cAAH,GAAoBF,WAAzC;IAFJ,GAGGH,IAHHD,CADG;EAAP;AAKH","names":["combineNormalizers","normalizers","node","context","reduce","currentNode","normalizer","normalizedNode"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/utils/normalize-utils.ts"],"sourcesContent":["import { Context, SyntaxTreeNode } from '../types';\n\nexport type Normalizer = (node: SyntaxTreeNode, context: Context) => SyntaxTreeNode;\nexport type PartialNormalizer = (node: SyntaxTreeNode, context: Context) => SyntaxTreeNode | void;\n\nexport function combineNormalizers(normalizers: PartialNormalizer[]): Normalizer {\n    return (node: SyntaxTreeNode, context: Context) =>\n        normalizers.reduce((currentNode, normalizer) => {\n            const normalizedNode = normalizer(currentNode, context);\n            return normalizedNode ? normalizedNode : currentNode;\n        }, node);\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = normalize;\n\nvar _normalizeBoolean = _interopRequireDefault(require(\"./nodes/normalize-boolean\"));\n\nvar _normalizeDivided = _interopRequireDefault(require(\"./nodes/normalize-divided\"));\n\nvar _normalizeEquals = _interopRequireDefault(require(\"./nodes/normalize-equals\"));\n\nvar _normalizeMinus = _interopRequireDefault(require(\"./nodes/normalize-minus\"));\n\nvar _normalizeNegate = _interopRequireDefault(require(\"./nodes/normalize-negate\"));\n\nvar _normalizeNumber = _interopRequireDefault(require(\"./nodes/normalize-number\"));\n\nvar _normalizePlus = _interopRequireDefault(require(\"./nodes/normalize-plus\"));\n\nvar _normalizePower = _interopRequireDefault(require(\"./nodes/normalize-power\"));\n\nvar _normalizeSymbol = _interopRequireDefault(require(\"./nodes/normalize-symbol\"));\n\nvar _normalizeTimes = _interopRequireDefault(require(\"./nodes/normalize-times\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction normalize(node, context) {\n  switch (node.type) {\n    case 'number':\n      return (0, _normalizeNumber[\"default\"])(node);\n\n    case 'symbol':\n      return (0, _normalizeSymbol[\"default\"])(node, context);\n\n    case 'boolean':\n      return (0, _normalizeBoolean[\"default\"])(node);\n\n    case 'plus':\n      return (0, _normalizePlus[\"default\"])(node, context);\n\n    case 'minus':\n      return (0, _normalizeMinus[\"default\"])(node, context);\n\n    case 'negate':\n      return (0, _normalizeNegate[\"default\"])(node, context);\n\n    case 'times':\n      return (0, _normalizeTimes[\"default\"])(node, context);\n\n    case 'divided':\n      return (0, _normalizeDivided[\"default\"])(node, context);\n\n    case 'power':\n      return (0, _normalizePower[\"default\"])(node, context);\n\n    case 'equals':\n      return (0, _normalizeEquals[\"default\"])(node, context);\n\n    default:\n      throw \"NormalizationError: unsupported node type \\\"\".concat(node.type, \"\\\"\");\n  }\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEe,SAASA,SAAT,CAAmBC,IAAnB,EAAyCC,OAAzC,EAA2E;EACtF,QAAQD,IAAI,CAACE,IAAb;IACI,KAAK,QAAL;MACI,OAAO,iCAAgBF,IAAhB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,iCAAgBA,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAO,kCAAiBD,IAAjB,CAAP;;IAEJ,KAAK,MAAL;MACI,OAAO,+BAAcA,IAAd,EAAoBC,OAApB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,gCAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,iCAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,gCAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAO,kCAAiBD,IAAjB,EAAuBC,OAAvB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,gCAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,iCAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ;MACI,4DAAoDD,IAAI,CAACE,IAAzD;EAhCR;AAkCH","names":["normalize","node","context","type"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/normalize/index.ts"],"sourcesContent":["import { Context, SyntaxTreeNode } from '../types';\nimport normalizeBoolean from './nodes/normalize-boolean';\nimport normalizeDivided from './nodes/normalize-divided';\nimport normalizeEquals from './nodes/normalize-equals';\nimport normalizeMinus from './nodes/normalize-minus';\nimport normalizeNegate from './nodes/normalize-negate';\nimport normalizeNumber from './nodes/normalize-number';\nimport normalizePlus from './nodes/normalize-plus';\nimport normalizePower from './nodes/normalize-power';\nimport normalizeSymbol from './nodes/normalize-symbol';\nimport normalizeTimes from './nodes/normalize-times';\n\nexport default function normalize(node: SyntaxTreeNode, context: Context): SyntaxTreeNode {\n    switch (node.type) {\n        case 'number':\n            return normalizeNumber(node);\n\n        case 'symbol':\n            return normalizeSymbol(node, context);\n\n        case 'boolean':\n            return normalizeBoolean(node);\n\n        case 'plus':\n            return normalizePlus(node, context);\n\n        case 'minus':\n            return normalizeMinus(node, context);\n\n        case 'negate':\n            return normalizeNegate(node, context);\n\n        case 'times':\n            return normalizeTimes(node, context);\n\n        case 'divided':\n            return normalizeDivided(node, context);\n\n        case 'power':\n            return normalizePower(node, context);\n\n        case 'equals':\n            return normalizeEquals(node, context);\n\n        default:\n            throw `NormalizationError: unsupported node type \"${node.type}\"`;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}
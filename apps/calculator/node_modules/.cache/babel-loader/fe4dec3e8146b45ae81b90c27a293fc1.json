{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = evaluate;\n\nvar _And = _interopRequireDefault(require(\"./nodes/And\"));\n\nvar _Boolean = _interopRequireDefault(require(\"./nodes/Boolean\"));\n\nvar _Lambda = _interopRequireDefault(require(\"./nodes/Lambda\"));\n\nvar _Divided = _interopRequireDefault(require(\"./nodes/Divided\"));\n\nvar _Equals = _interopRequireDefault(require(\"./nodes/Equals\"));\n\nvar _FunctionCall = _interopRequireDefault(require(\"./nodes/FunctionCall\"));\n\nvar _Greater = _interopRequireDefault(require(\"./nodes/Greater\"));\n\nvar _GreaterOrEquals = _interopRequireDefault(require(\"./nodes/GreaterOrEquals\"));\n\nvar _Less = _interopRequireDefault(require(\"./nodes/Less\"));\n\nvar _LessOrEquals = _interopRequireDefault(require(\"./nodes/LessOrEquals\"));\n\nvar _Minus = _interopRequireDefault(require(\"./nodes/Minus\"));\n\nvar _Negate = _interopRequireDefault(require(\"./nodes/Negate\"));\n\nvar _Number = _interopRequireDefault(require(\"./nodes/Number\"));\n\nvar _Or = _interopRequireDefault(require(\"./nodes/Or\"));\n\nvar _Plus = _interopRequireDefault(require(\"./nodes/Plus\"));\n\nvar _Power = _interopRequireDefault(require(\"./nodes/Power\"));\n\nvar _Symbol = _interopRequireDefault(require(\"./nodes/Symbol\"));\n\nvar _Times = _interopRequireDefault(require(\"./nodes/Times\"));\n\nvar _Vector = _interopRequireDefault(require(\"./nodes/Vector\"));\n\nvar _Define = _interopRequireDefault(require(\"./nodes/Define\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction evaluate(node, context) {\n  switch (node.type) {\n    case 'number':\n      return (0, _Number[\"default\"])(node);\n\n    case 'boolean':\n      return (0, _Boolean[\"default\"])(node);\n\n    case 'symbol':\n      return (0, _Symbol[\"default\"])(node, context);\n\n    case 'or':\n      return (0, _Or[\"default\"])(node, context);\n\n    case 'and':\n      return (0, _And[\"default\"])(node, context);\n\n    case 'equals':\n      return (0, _Equals[\"default\"])(node, context);\n\n    case 'less':\n      return (0, _Less[\"default\"])(node, context);\n\n    case 'greater':\n      return (0, _Greater[\"default\"])(node, context);\n\n    case 'lessOrEquals':\n      return (0, _LessOrEquals[\"default\"])(node, context);\n\n    case 'greaterOrEquals':\n      return (0, _GreaterOrEquals[\"default\"])(node, context);\n\n    case 'plus':\n      return (0, _Plus[\"default\"])(node, context);\n\n    case 'minus':\n      return (0, _Minus[\"default\"])(node, context);\n\n    case 'times':\n      return (0, _Times[\"default\"])(node, context);\n\n    case 'divided':\n      return (0, _Divided[\"default\"])(node, context);\n\n    case 'power':\n      return (0, _Power[\"default\"])(node, context);\n\n    case 'negate':\n      return (0, _Negate[\"default\"])(node, context);\n\n    case 'vector':\n      return (0, _Vector[\"default\"])(node, context);\n\n    case 'functionCall':\n      return (0, _FunctionCall[\"default\"])(node, context);\n\n    case 'lambda':\n      return (0, _Lambda[\"default\"])(node, context);\n\n    case 'function':\n      return node;\n\n    case 'define':\n      return (0, _Define[\"default\"])(node, context);\n\n    default:\n      throw \"EvaluationError: unknown node type\";\n  }\n}","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEe,SAASA,QAAT,CAAkBC,IAAlB,EAAwCC,OAAxC,EAA0D;EACrE,QAAQD,IAAI,CAACE,IAAb;IACI,KAAK,QAAL;MACI,OAAO,wBAAeF,IAAf,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAO,yBAAgBA,IAAhB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAeA,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,IAAL;MACI,OAAO,oBAAWD,IAAX,EAAiBC,OAAjB,CAAP;;IAEJ,KAAK,KAAL;MACI,OAAO,qBAAYD,IAAZ,EAAkBC,OAAlB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,MAAL;MACI,OAAO,sBAAaD,IAAb,EAAmBC,OAAnB,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAO,yBAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,cAAL;MACI,OAAO,8BAAqBD,IAArB,EAA2BC,OAA3B,CAAP;;IAEJ,KAAK,iBAAL;MACI,OAAO,iCAAwBD,IAAxB,EAA8BC,OAA9B,CAAP;;IAEJ,KAAK,MAAL;MACI,OAAO,sBAAaD,IAAb,EAAmBC,OAAnB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,uBAAcD,IAAd,EAAoBC,OAApB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,uBAAcD,IAAd,EAAoBC,OAApB,CAAP;;IAEJ,KAAK,SAAL;MACI,OAAO,yBAAgBD,IAAhB,EAAsBC,OAAtB,CAAP;;IAEJ,KAAK,OAAL;MACI,OAAO,uBAAcD,IAAd,EAAoBC,OAApB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,cAAL;MACI,OAAO,8BAAqBD,IAArB,EAA2BC,OAA3B,CAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAeD,IAAf,EAAqBC,OAArB,CAAP;;IAEJ,KAAK,UAAL;MACI,OAAOD,IAAP;;IAEJ,KAAK,QAAL;MACI,OAAO,wBAAeA,IAAf,EAAqBC,OAArB,CAAP;;IAEJ;MACI;EAjER;AAmEH","names":["evaluate","node","context","type"],"sources":["/home/behrenle/Projects/private/arithmico-calculator/node_modules/@behrenle/number-cruncher/src/eval/index.ts"],"sourcesContent":["import { Context, SyntaxTreeNode } from '../types';\nimport evaluateAnd from './nodes/And';\nimport evaluateBoolean from './nodes/Boolean';\nimport evaluateLambda from './nodes/Lambda';\nimport evaluateDivided from './nodes/Divided';\nimport evaluateEquals from './nodes/Equals';\nimport evaluateFunctionCall from './nodes/FunctionCall';\nimport evaluateGreater from './nodes/Greater';\nimport evaluateGreaterOrEquals from './nodes/GreaterOrEquals';\nimport evaluateLess from './nodes/Less';\nimport evaluateLessOrEquals from './nodes/LessOrEquals';\nimport evaluateMinus from './nodes/Minus';\nimport evaluateNegate from './nodes/Negate';\nimport evaluateNumber from './nodes/Number';\nimport evaluateOr from './nodes/Or';\nimport evaluatePlus from './nodes/Plus';\nimport evaluatePower from './nodes/Power';\nimport evaluateSymbol from './nodes/Symbol';\nimport evaluateTimes from './nodes/Times';\nimport evaluateVector from './nodes/Vector';\nimport evaluateDefine from './nodes/Define';\n\nexport default function evaluate(node: SyntaxTreeNode, context: Context) {\n    switch (node.type) {\n        case 'number':\n            return evaluateNumber(node);\n\n        case 'boolean':\n            return evaluateBoolean(node);\n\n        case 'symbol':\n            return evaluateSymbol(node, context);\n\n        case 'or':\n            return evaluateOr(node, context);\n\n        case 'and':\n            return evaluateAnd(node, context);\n\n        case 'equals':\n            return evaluateEquals(node, context);\n\n        case 'less':\n            return evaluateLess(node, context);\n\n        case 'greater':\n            return evaluateGreater(node, context);\n\n        case 'lessOrEquals':\n            return evaluateLessOrEquals(node, context);\n\n        case 'greaterOrEquals':\n            return evaluateGreaterOrEquals(node, context);\n\n        case 'plus':\n            return evaluatePlus(node, context);\n\n        case 'minus':\n            return evaluateMinus(node, context);\n\n        case 'times':\n            return evaluateTimes(node, context);\n\n        case 'divided':\n            return evaluateDivided(node, context);\n\n        case 'power':\n            return evaluatePower(node, context);\n\n        case 'negate':\n            return evaluateNegate(node, context);\n\n        case 'vector':\n            return evaluateVector(node, context);\n\n        case 'functionCall':\n            return evaluateFunctionCall(node, context);\n\n        case 'lambda':\n            return evaluateLambda(node, context);\n\n        case 'function':\n            return node;\n\n        case 'define':\n            return evaluateDefine(node, context);\n\n        default:\n            throw `EvaluationError: unknown node type`;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}